{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> <p> </p> </p>"},{"location":"#netbuff-unity-networking-system","title":"NetBuff - Unity Networking System","text":"<p>NetBuff is a networking system based on the Unity game engine. Initially created for a college project, the system has been improved to the point of deserving to be polished and released / made available separately.</p> <p>The NetBuff comes as a lighter and simpler alternative to other existing solutions such as Unity's own NGO (Netcode For GameObjects) and third-party solutions (Mirror, etc...)</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Advanced Editor tools</li> <li>Hot-Reload (Server maintains its state after a recompile)</li> <li>Session Management</li> <li>Server password protection</li> <li>Server discovery system</li> <li>Reliable packet delivery</li> <li>Lightweight and optimized</li> <li>Simple to implement</li> <li>Support for multiple scenes</li> </ul>"},{"location":"#installation-guide","title":"Installation Guide","text":"<ol> <li>Go to the Unity Package Manager (Window -&gt; Package Manager).</li> <li>Click the \"+\" button in the top-left corner of the window.</li> <li>Select \"Add package from git URL...\".</li> <li>Paste the link below and click \"Add\".</li> </ol> <pre><code>https://github.com/buff-buff-studio/NetBuff-Lib.git#package\n</code></pre>"},{"location":"#supported-transport-methods","title":"Supported Transport Methods","text":"<ul> <li>UDP</li> <li>Local (Split Screen)</li> <li>Custom Transports</li> </ul>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Scripts by @arnilsenarthur</li> <li>Package management by @SergioMacellani</li> <li>LiteNetLib by RevenantX</li> <li>Serialized Dictionary by ayellowpaper</li> </ul>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#animatorsyncpacket","title":"AnimatorSyncPacket","text":"Class NetBuff.Components.AnimatorSyncPacket <p>Info</p> <p>Packet used to sync the state of an Animator component.</p>"},{"location":"api_reference/#implements","title":"Implements","text":"NetBuff.Interface.IOwnedPacket"},{"location":"api_reference/#properties","title":"Properties","text":"Property Accessors Description public Changes Change Get Set Represents the changes that have been made to the Animator. public LayerInfo[] Layers Get Set Holds information about the layers that have been changed. public float Speed Get Set The speed of the Animator. public byte ChangedParameters Get Set The amount of parameters that have been changed. public byte[] ParameterData Get Set Holds the data of the parameters that have been changed. public NetworkId IdOverrides Get Set The id of the owner of the packet."},{"location":"api_reference/#methods","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#animatortriggerpacket","title":"AnimatorTriggerPacket","text":"Class NetBuff.Components.AnimatorTriggerPacket <p>Info</p> <p>Packet used to trigger an Animator trigger.</p>"},{"location":"api_reference/#implements_1","title":"Implements","text":"NetBuff.Interface.IOwnedPacket"},{"location":"api_reference/#properties_1","title":"Properties","text":"Property Accessors Description public int TriggerHash Get Set The hash of the trigger. public NetworkId IdOverrides Get Set The id of the owner of the packet."},{"location":"api_reference/#methods_1","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#boolnetworkvalue","title":"BoolNetworkValue","text":"Class NetBuff.Misc.BoolNetworkValue <p>Info</p> <p>USed to store a boolean value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_2","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_2","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#bytenetworkvalue","title":"ByteNetworkValue","text":"Class NetBuff.Misc.ByteNetworkValue <p>Info</p> <p>Used to store a byte value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_3","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_3","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#changes","title":"Changes","text":"Enum NetBuff.Components.AnimatorSyncPacket.Changes <p>Info</p> <p>Represents the changes that have been made to the Animator.</p>"},{"location":"api_reference/#enum-values","title":"Enum Values","text":"Value Description None No changes have been made. Layers At least one layer have been changed. Parameters At least one parameter have been changed. Speed The speed of the Animator has been changed."},{"location":"api_reference/#clientonlyattribute","title":"ClientOnlyAttribute","text":"Class NetBuff.Misc.ClientOnlyAttribute <p>Info</p> <p>Used to mark a method, field or property as client only.This means that the method, field or property will only be used on the client side.</p>"},{"location":"api_reference/#color32networkvalue","title":"Color32NetworkValue","text":"Class NetBuff.Misc.Color32NetworkValue <p>Info</p> <p>Used to store a Color32 value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_4","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_4","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#colornetworkvalue","title":"ColorNetworkValue","text":"Class NetBuff.Misc.ColorNetworkValue <p>Info</p> <p>Used to store a Color value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_5","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_5","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#connectionendmode","title":"ConnectionEndMode","text":"Enum NetBuff.NetworkTransport.ConnectionEndMode <p>Info</p> <p>Enum for the connection end mode.</p>"},{"location":"api_reference/#enum-values_1","title":"Enum Values","text":"Value Description Shutdown Connection end normally. InternalError Connection end with error."},{"location":"api_reference/#currentgraph","title":"CurrentGraph","text":"Enum NetBuff.NetworkManagerGUI.CurrentGraph <p>Info</p> <p>Used to choose the current rendered graph type.</p>"},{"location":"api_reference/#enum-values_2","title":"Enum Values","text":"Value Description None No graph is rendered. FPS A graph for FPS is rendered. Latency A graph for Latency is rendered. PacketSent A graph for Packet Sent is rendered. PacketReceived A graph for Packet Received is rendered. PacketLoss A graph for Packet Loss is rendered."},{"location":"api_reference/#doublenetworkvalue","title":"DoubleNetworkValue","text":"Class NetBuff.Misc.DoubleNetworkValue <p>Info</p> <p>Used to store a double value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_6","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_6","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#environmenttype","title":"EnvironmentType","text":"Enum NetBuff.NetworkTransport.EnvironmentType <p>Info</p> <p>Enum for the type of environment.</p>"},{"location":"api_reference/#enum-values_3","title":"Enum Values","text":"Value Description None Network environment is not set. Server Network environment is server. Host Network environment is host (server and client). Client Network environment is client."},{"location":"api_reference/#floatnetworkvalue","title":"FloatNetworkValue","text":"Class NetBuff.Misc.FloatNetworkValue <p>Info</p> <p>Used to store a float value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_7","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_7","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#graphplotter","title":"GraphPlotter","text":"Class NetBuff.Misc.GraphPlotter <p>Info</p> <p>Utility class for drawing graphs in Unity.Used by NetworkManagerGUI to draw graphs of network statistics.</p>"},{"location":"api_reference/#methods_8","title":"Methods","text":"Method Parameters Description public static void DrawGraph float xfloat yint barWidthColor colorint maxWidthIList&lt;float&gt; datafloat maxfloat maxHeight Draws a graph to display the given data.The position represents the bottom-left corner of the graph."},{"location":"api_reference/#graphplotterdata","title":"GraphPlotterData","text":"Class NetBuff.Misc.GraphPlotter.GraphPlotterData <p>Info</p> <p>Holds the data to be plotted on the graph.</p>"},{"location":"api_reference/#properties_2","title":"Properties","text":"Property Accessors Description public IList&lt;float&gt; Data Get The data to be plotted. public int Limit Get Set The maximum number of data points to be stored. public float Max Get Set The maximum value of the data. Used to scale the graph."},{"location":"api_reference/#methods_9","title":"Methods","text":"Method Parameters Description public void AddData float toAddbool changeMax = true Adds a data point to the graph.If the number of data points exceeds the limit, the oldest data point is removed.If changeMax is true, the maximum value of the data is updated if the new data point is greater than the currentmaximum. public void Clear Clears all data points."},{"location":"api_reference/#iclientconnectioninfo","title":"IClientConnectionInfo","text":"Interface NetBuff.Interface.IClientConnectionInfo <p>Info</p> <p>Holds a connection information along with the remote client id.</p>"},{"location":"api_reference/#implements_8","title":"Implements","text":"NetBuff.Interface.IConnectionInfo"},{"location":"api_reference/#properties_3","title":"Properties","text":"Property Accessors Description public int Id Get The id of the remote client. public int LatencyOverrides Get The latency of the connection (in milliseconds).Represents the RTT (Round Trip Time) of the connection. public long PacketSentOverrides Get The number of packets sent through the connection. public long PacketReceivedOverrides Get The number of packets received through the connection. public long PacketLossOverrides Get The number of packets lost through the connection. public long PacketLossPercentageOverrides Get The percentage of packet loss through the connection.It is calculated as PacketLoss * 100 / PacketSent.Float value between 0 and 100."},{"location":"api_reference/#iconnectioninfo","title":"IConnectionInfo","text":"Interface NetBuff.Interface.IConnectionInfo <p>Info</p> <p>Holds a connection information</p>"},{"location":"api_reference/#properties_4","title":"Properties","text":"Property Accessors Description public int Latency Get The latency of the connection (in milliseconds).Represents the RTT (Round Trip Time) of the connection. public long PacketSent Get The number of packets sent through the connection. public long PacketReceived Get The number of packets received through the connection. public long PacketLoss Get The number of packets lost through the connection. public long PacketLossPercentage Get The percentage of packet loss through the connection.It is calculated as PacketLoss * 100 / PacketSent.Float value between 0 and 100."},{"location":"api_reference/#inetworkbehaviourserializer","title":"INetworkBehaviourSerializer","text":"Interface NetBuff.Interface.INetworkBehaviourSerializer <p>Info</p> <p>Interface for serializing and deserializing network behaviours additional data.You can implement this interface in your network behaviour to send additional data over the network.</p>"},{"location":"api_reference/#methods_10","title":"Methods","text":"Method Parameters Description public void OnSerialize BinaryWriter writerbool forceSendAll This method is called when the network behaviour is being serialized.If forceSendAll is true, all data should be sent, otherwise only dirty data should be sent.ForceSendAll will only be true when the server is sending data to a client for the first time. public void OnDeserialize BinaryReader reader This method is called when the network behaviour is being deserialized."},{"location":"api_reference/#intnetworkvalue","title":"IntNetworkValue","text":"Class NetBuff.Misc.IntNetworkValue <p>Info</p> <p>Used to store a int value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_9","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_11","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#iownedpacket","title":"IOwnedPacket","text":"Interface NetBuff.Interface.IOwnedPacket <p>Info</p> <p>Base interface for all owned packets.Owned packets are packets that have an NetworkIdentity owner.They will be sent through the network to the owner of the packet automatically.Packets are used to send data between the server and the client.They are serialized to bytes and deserialized from bytes to be sent over the network.</p>"},{"location":"api_reference/#implements_10","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_5","title":"Properties","text":"Property Accessors Description public NetworkId Id Get Set The id of the owner of the packet."},{"location":"api_reference/#methods_12","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#ipacket","title":"IPacket","text":"Interface NetBuff.Interface.IPacket <p>Info</p> <p>Base interface for all packets.Packets are used to send data between the server and the client.They are serialized to bytes and deserialized from bytes to be sent over the network.</p>"},{"location":"api_reference/#methods_13","title":"Methods","text":"Method Parameters Description public void Serialize BinaryWriter writer Serializes the packet to a binary writer. public void Deserialize BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#layerinfo","title":"LayerInfo","text":"Class NetBuff.Components.AnimatorSyncPacket.LayerInfo <p>Info</p> <p>Holds information about a layer.</p>"},{"location":"api_reference/#properties_6","title":"Properties","text":"Property Accessors Description public byte LayerIndex Get Set The index of the layer. public int StateHash Get Set The hash of the current Animator state. public float NormalizedTime Get Set The normalized time of the current Animator state. public float LayerWeight Get Set The weight of the layer."},{"location":"api_reference/#localnetworktransport","title":"LocalNetworkTransport","text":"Class NetBuff.Local.LocalNetworkTransport <p>Info</p> <p>Used for local running, does not actually send packets over the network.Can be used on Split Screen games or for testing.</p>"},{"location":"api_reference/#implements_11","title":"Implements","text":"NetBuff.NetworkTransport"},{"location":"api_reference/#properties_7","title":"Properties","text":"Property Accessors Description public int ClientCount Get Set The amount of clients that will be created when the host is started."},{"location":"api_reference/#methods_14","title":"Methods","text":"Method Parameters Description public ServerDiscoverer GetServerDiscovererOverrides Returns a new discoverer that will be used to find available servers. public void StartHostOverrides int magicNumber Starts the network transport as a host (server and client). public void StartServerOverrides Starts the network transport as a server. public void StartClientOverrides int magicNumber Starts the network transport as a client. public void CloseOverrides Closes the network transport. public IClientConnectionInfo GetClientInfoOverrides int id Returns the connection information of the client with the given id. public int GetClientCountOverrides Returns the number of clients connected to the server. public IEnumerable&lt;IClientConnectionInfo&gt; GetClientsOverrides Returns all the clients connected to the server. public void ClientDisconnectOverrides string reason Disconnects the client from the server. public void ServerDisconnectOverrides int idstring reason Disconnects the client with the given id from the server. public void ClientSendPacketOverrides IPacket packetbool reliable = false Sends a packet to the server.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. public void ServerSendPacketOverrides IPacket packetint target = -1bool reliable = false Sends a packet to the client with the given id.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered.If the target is -1, the packet will be sent to all clients connected to the server."},{"location":"api_reference/#longnetworkvalue","title":"LongNetworkValue","text":"Class NetBuff.Misc.LongNetworkValue <p>Info</p> <p>Used to store a long value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_12","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_15","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#modifiertype","title":"ModifierType","text":"Enum NetBuff.Misc.NetworkValue.ModifierType <p>Info</p> <p>Used to determine who can modify a value.</p>"},{"location":"api_reference/#enum-values_4","title":"Enum Values","text":"Value Description OwnerOnly Only the owner of the behaviour that this value is attached to can modify it. Server Only the server can modify it. Everybody Everybody can modify it."},{"location":"api_reference/#networkaction","title":"NetworkAction","text":"Class NetBuff.Misc.NetworkAction <p>Info</p> <p>Main class for network actions. Should be used to register and invoke network actions</p>"},{"location":"api_reference/#properties_8","title":"Properties","text":"Property Accessors Description public static NetworkActionListener&lt;NetworkId,NetworkIdentity&gt; OnObjectSpawn Get Called when a object is spawned public static NetworkActionListener&lt;NetworkId,NetworkIdentity&gt; OnObjectDespawn Get Called when a object is despawned public static NetworkActionListener&lt;NetworkId,NetworkIdentity&gt; OnObjectChangeOwner Get Called when a object owner is changed public static NetworkActionListener&lt;NetworkId,NetworkIdentity&gt; OnObjectChangeActive Get Called when a object active state is changed public static NetworkActionListener&lt;NetworkId,NetworkIdentity&gt; OnObjectSceneChanged Get Called when a object scene is changed public static NetworkActionListener&lt;string,int&gt; OnSceneLoaded Get Called when a scene is loaded public static NetworkActionListener&lt;string,int&gt; OnSceneUnloaded Get Called when a scene is unloaded"},{"location":"api_reference/#methods_16","title":"Methods","text":"Method Parameters Description public static void ClearAll Clear all network actions"},{"location":"api_reference/#networkactionttr","title":"NetworkAction&lt;T,TR&gt;","text":"Class NetBuff.Misc.NetworkAction&lt;T,TR&gt; <p>Info</p> <p>Used as callback for network actions</p>"},{"location":"api_reference/#properties_9","title":"Properties","text":"Property Accessors Description public T Value Get Set Holds the value of the network action"},{"location":"api_reference/#methods_17","title":"Methods","text":"Method Parameters Description public void Then Action then Set the callback for the network action public void Invoke TR result Invoke the network action"},{"location":"api_reference/#networkactionlistenerttr","title":"NetworkActionListener&lt;T,TR&gt;","text":"Class NetBuff.Misc.NetworkActionListener&lt;T,TR&gt; <p>Info</p> <p>Base class for network actions listeners</p>"},{"location":"api_reference/#methods_18","title":"Methods","text":"Method Parameters Description public void Register T keyNetworkAction actionbool temp Register a network action public void Remove T keyNetworkAction action Remove a network action public void Invoke T keyTR result Invoke all registered network action. Clears all temporary actions public void Clear Clear all registred network actions"},{"location":"api_reference/#networkanimator","title":"NetworkAnimator","text":"Class NetBuff.Components.NetworkAnimator <p>Info</p> <p>Syncs the state of an Animator component over the network, including parameters, layers, speed and time</p>"},{"location":"api_reference/#implements_13","title":"Implements","text":"NetBuff.Components.NetworkBehaviour NetBuff.Interface.INetworkBehaviourSerializer"},{"location":"api_reference/#properties_10","title":"Properties","text":"Property Accessors Description public int TickRate Get Set Determines the tick rate of the NetworkAnimator. When set to -1, the default tick rate of the NetworkManager willbe used. public Animator Animator Get The Animator component to sync."},{"location":"api_reference/#methods_19","title":"Methods","text":"Method Parameters Description public void SetTrigger int triggerHash Sets a trigger on the Animator component. public void SetTrigger string triggerName Sets a trigger on the Animator component. public float GetFloat string name Gets the value of the specified parameter. public void SetFloat string namefloat value Sets the value of the specified parameter. public float GetFloat int nameHash Gets the value of the specified parameter. public void SetFloat int nameHashfloat value Sets the value of the specified parameter. public bool GetBool string name Gets the value of the specified parameter. public void SetBool string namebool value Sets the value of the specified parameter. public bool GetBool int nameHash Gets the value of the specified parameter. public void SetBool int nameHashbool value Sets the value of the specified parameter. public int GetInteger string name Gets the value of the specified parameter. public void SetInteger string nameint value Sets the value of the specified parameter. public int GetInteger int nameHash Gets the value of the specified parameter. public void SetInteger int nameHashint value Sets the value of the specified parameter. public void OnSpawnedOverrides bool isRetroactive Called when this object is spawned on the network.Called when the network environment initializes if the object already exists.The isRetroactive parameter is true if the client is joining the server after the object is already spawned. public void OnServerReceivePacketOverrides IOwnedPacket packetint clientId Called when the server receives a packet owned by this object from a client public void OnClientReceivePacketOverrides IOwnedPacket packet Called when the clients receive a packet owned by this object from the server. public void OnSerializeOverrides BinaryWriter writerbool forceSendAll This method is called when the network behaviour is being serialized.If forceSendAll is true, all data should be sent, otherwise only dirty data should be sent.ForceSendAll will only be true when the server is sending data to a client for the first time. public void OnDeserializeOverrides BinaryReader reader This method is called when the network behaviour is being deserialized."},{"location":"api_reference/#networkbehaviour","title":"NetworkBehaviour","text":"Class NetBuff.Components.NetworkBehaviour <p>Info</p> <p>Base class for all network behaviours.NetworkBehaviours cannot be added / removed at runtime.</p>"},{"location":"api_reference/#properties_11","title":"Properties","text":"Property Accessors Description public byte BehaviourId Get The behaviour id of this behaviour (Relative to the identity). public bool IsDirty Get Whether this behaviour has any dirty values that needs to be synchronized. public ReadOnlySpan&lt;NetworkValue&gt; Values Get The values attached to this behaviour. public NetworkIdentity Identity Get The network identity which this behaviour is attached to. public NetworkId Id Get The network id of this behaviour identity. public int OwnerId Get The owner id of this behaviour identity.If the owner id is -1, the object is owned by the server. public NetworkId PrefabId Get The id of the prefab used to spawn this behaviour identity object.If the prefab id is empty, the object was not spawned from a prefab at runtime. public bool HasAuthority Get Checks if the local environment has authority over this behaviour. public bool IsOwnedByClient Get Checks if this behaviour identity is owned by any client. public int SceneId Get The if of the scene this behaviour identity is in. public static bool IsServer Get Checks if the local environment is the server. public static int LoadedSceneCount Get The number of currently loaded scenes on the network. public static string MainScene Get The name of the scene where the NetworkManager is currently in. public static string LastLoadedScene Get The name of the currently last loaded scene."},{"location":"api_reference/#methods_20","title":"Methods","text":"Method Parameters Description Serverpublic void OnServerReceivePacket IOwnedPacket packetint clientId Called when the server receives a packet owned by this object from a client Clientpublic void OnClientReceivePacket IOwnedPacket packet Called when the clients receive a packet owned by this object from the server. public void OnSpawned bool isRetroactive Called when this object is spawned on the network.Called when the network environment initializes if the object already exists.The isRetroactive parameter is true if the client is joining the server after the object is already spawned. public void OnSceneChanged int fromSceneint toScene Called when this object is moved to another scene. Serverpublic void OnClientConnected int clientId Called when a new client connects to the server. Serverpublic void OnClientDisconnected int clientId Called when a client disconnects from the server. public void OnDespawned Called when this object is despawned from the network. public void OnActiveChanged bool active Called when the active state of this object changes.Called when the object is spawned as well. public void OnOwnershipChanged int oldOwnerint newOwner Called when the owner of this object changes. public void OnSceneLoaded int sceneId Called when a new scene is loaded. public void OnSceneUnloaded int sceneId Called when a loaded scene is unloaded. public void OnAnyObjectSpawned NetworkIdentity identitybool isRetroactive Called when a new object is spawned on the network.The isRetroactive parameter is true if the client is joining the server after the object is already spawned. public void WithValues NetworkValue[] values Attaches the given values to this behaviour.Shall not be called after the behaviour is spawned. public void MarkSerializerDirty Marks the serializer of this behaviour as dirty, so it will be synchronized through the network.Only call this method if the behaviour implements INetworkBehaviourSerializer. public void UpdateDirtyValues Synchronizes the dirty values of this behaviour through the network. Serverpublic void SendBehaviourDataToClient int clientId Synchronizes all data of this behaviour through the network.Used to synchronize the current server state to a new client. Serverpublic NetworkBehaviourDataPacket GetBehaviourDataPacket Creates a packet containing all data of this behaviour.Used to synchronize the current server state to a new client. public void ApplyDirtyValues byte[] payload Applies the given payload to the values of this behaviour.used to synchronize the values of this behaviour from the network. Serverpublic static void ServerBroadcastPacket IPacket packetbool reliable = false Broadcasts a packet to all clients.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. Serverpublic static void ServerBroadcastPacketExceptFor IPacket packetint exceptbool reliable = false Broadcasts a packet to all clients except for the given client.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. Serverpublic static void ServerSendPacket IPacket packetint clientIdbool reliable = false Sends a packet to the given client.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. Clientpublic static void ClientSendPacket IPacket packetbool reliable = false Sends a packet to the server.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. public void SendPacket IPacket packetbool reliable = false Sends a packet through the network, automatically choosing the correct method.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. Requires Authoritypublic NetworkAction&lt;NetworkId,NetworkIdentity&gt; Despawn Despawns the object from the network.Requires authority. Requires Authoritypublic NetworkAction&lt;NetworkId,NetworkIdentity&gt; SetActive bool active Changes the active state of the object.Requires authority. Requires Authoritypublic NetworkAction&lt;NetworkId,NetworkIdentity&gt; SetOwner int clientId Sets the owner of the object.Requires authority. Serverpublic void ForceSetOwner int clientId Forces the transfer of ownership of the object.Can be called by the server only.Useful for preventing the despawn of object when the owner disconnects. public static NetworkIdentity GetNetworkObject NetworkId objectId Returns the network identity object with the given id. public static IEnumerable&lt;NetworkIdentity&gt; GetNetworkObjects Returns all the network identity objects. public static int GetNetworkObjectCount Returns the number of network identity objects. public static IEnumerable&lt;NetworkIdentity&gt; GetNetworkObjectsOwnedBy int clientId Returns all the network identity objects owned by the given client.If the client id is -1, it returns all the objects owned by the server. Clientpublic int GetLocalClientIndex int clientId Returns the index of the local client with the given id. Clientpublic int GetLocalClientCount Returns the number of local clients. Clientpublic ReadOnlySpan&lt;int&gt; GetLocalClientIds returns the client id of all local clients. public static GameObject GetPrefabById NetworkId prefab Returns the prefab object registered with the given id. public static NetworkId GetIdForPrefab GameObject prefab Returns the id of a registered prefab. public static bool IsPrefabValid NetworkId prefab Checks if the prefab is registered. Requires Authoritypublic NetworkAction&lt;NetworkId,NetworkIdentity&gt; MoveToScene int sceneId Moves this object to a different scene.Requires authority. Requires Authoritypublic void MoveToScene string sceneName Moves this object to a different scene.Requires authority. public static IEnumerable&lt;string&gt; GetLoadedScenes Returns the name of all the scenes loaded on the network. public static int GetSceneId string sceneName Returns the id of the scene with the given name. public static string GetSceneName int sceneId Returns the name of the scene with the given id. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn GameObject prefab Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn GameObject prefabVector3 positionQuaternion rotationbool active Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn GameObject prefabVector3 positionQuaternion rotationint owner Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn GameObject prefabVector3 positionQuaternion rotation Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn GameObject prefabVector3 positionQuaternion rotationVector3 scalebool activeint owner = -1int scene = -1 Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded.If the scene id is 0, the object will be spawned in the main scene.If the scene id is -1, the object will be spawned in the last loaded scene.If the owner id is -1, the object will be owned by the server. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn NetworkId prefabIdVector3 positionQuaternion rotationVector3 scalebool activeint owner = -1int scene = -1 Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded.If the scene id is 0, the object will be spawned in the main scene.If the scene id is -1, the object will be spawned in the last loaded scene.If the owner id is -1, the object will be owned by the server."},{"location":"api_reference/#networkbehaviourdatapacket","title":"NetworkBehaviourDataPacket","text":"Class NetBuff.Packets.NetworkBehaviourDataPacket <p>Info</p> <p>Packet used to synchronize data of a network behaviour.</p>"},{"location":"api_reference/#implements_14","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_12","title":"Properties","text":"Property Accessors Description public NetworkId Id Get Set The network id of the network object. public byte BehaviourId Get Set The behaviour id of the network behaviour (index in the network object). public byte[] Payload Get Set The payload of the network behaviour data."},{"location":"api_reference/#methods_21","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networkclientidpacket","title":"NetworkClientIdPacket","text":"Class NetBuff.Packets.NetworkClientIdPacket <p>Info</p> <p>Packet sent from the server to the client to inform the client of its network id.</p>"},{"location":"api_reference/#implements_15","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_13","title":"Properties","text":"Property Accessors Description public int ClientId Get Set The client id assigned to the client by the server."},{"location":"api_reference/#methods_22","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networkid","title":"NetworkId","text":"Class NetBuff.Misc.NetworkId <p>Info</p> <p>A unique identifier for a network object.Represented as a 16-character hexadecimal string.Internally, it is stored as two 32-bit integers.There are 18,446,744,073,709,551,616 unique network IDs.</p>"},{"location":"api_reference/#properties_14","title":"Properties","text":"Property Accessors Description public static NetworkId Empty Get A network ID with all bits set to 0. public bool IsEmpty Get Checks if the network ID is empty. public int High Get Returns the high 32 bits of the network ID. public int Low Get Returns the low 32 bits of the network ID."},{"location":"api_reference/#methods_23","title":"Methods","text":"Method Parameters Description public int CompareTo object obj Compares two network IDs.If they are equal, returns 0.If this network ID is less than the other, returns -1.If this network ID is greater than the other, returns 1. public static NetworkId New Creates a new random network ID. public static NetworkId Read BinaryReader reader Reads a network ID from a binary reader. public bool Equals object obj Compares two network IDs. public int GetHashCode Gets the hash code of the network ID. public NetworkId Serialize BinaryWriter writer Serializes the network ID to a binary writer. public NetworkId Deserialize BinaryReader reader Deserializes the network ID from a binary reader. public string ToString Converts the network ID to a 16-character hexadecimal string. public static bool TryParse string inputobject result Try to parse a network ID from a string."},{"location":"api_reference/#networkidentity","title":"NetworkIdentity","text":"Class NetBuff.Components.NetworkIdentity <p>Info</p> <p>Used to keep the reference of an object throughout the network.All NetworkIdentity are registered in the NetworkManager.</p>"},{"location":"api_reference/#properties_15","title":"Properties","text":"Property Accessors Description public NetworkId Id Get The network id of this identity. public int OwnerId Get The owner id of this identity.If the owner id is -1, the object is owned by the server. public NetworkId PrefabId Get The id of the prefab used to spawn this identity object.If the prefab id is empty, the object was not spawned from a prefab at runtime. public bool HasAuthority Get Checks if the local environment has authority over this identity. public bool IsOwnedByClient Get Checks if this identity is owned by any client. public int SceneId Get The if of the scene this identity is in. public static bool IsServer Get Checks if the local environment is the server. public static int LoadedSceneCount Get The number of currently loaded scenes on the network. public static string MainScene Get The name of the scene where the NetworkManager is currently in. public static string LastLoadedScene Get The name of the currently last loaded scene. public NetworkBehaviour[] Behaviours Get All the network behaviours attached to this identity."},{"location":"api_reference/#methods_24","title":"Methods","text":"Method Parameters Description Serverpublic static void ServerBroadcastPacket IPacket packetbool reliable = false Broadcasts a packet to all clients.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. Serverpublic static void ServerBroadcastPacketExceptFor IPacket packetint exceptbool reliable = false Broadcasts a packet to all clients except for the given client.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. Serverpublic static void ServerSendPacket IPacket packetint clientIdbool reliable = false Sends a packet to the given client.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. Clientpublic static void ClientSendPacket IPacket packetbool reliable = false Sends a packet to the server.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. public void SendPacket IPacket packetbool reliable = false Sends a packet through the network, automatically choosing the correct method.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. Requires Authoritypublic NetworkAction&lt;NetworkId,NetworkIdentity&gt; Despawn Despawns the object from the network.Requires authority. Requires Authoritypublic NetworkAction&lt;NetworkId,NetworkIdentity&gt; SetActive bool active Changes the active state of the object.Requires authority. Requires Authoritypublic NetworkAction&lt;NetworkId,NetworkIdentity&gt; SetOwner int clientId Sets the owner of the object.Requires authority. Serverpublic void ForceSetOwner int clientId Forces the transfer of ownership of the object.Can be called by the server only.Useful for preventing the despawn of object when the owner disconnects. public static NetworkIdentity GetNetworkObject NetworkId objectId Returns the network identity object with the given id. public static IEnumerable&lt;NetworkIdentity&gt; GetNetworkObjects Returns all the network identity objects. public static int GetNetworkObjectCount Returns the number of network identity objects. public static IEnumerable&lt;NetworkIdentity&gt; GetNetworkObjectsOwnedBy int clientId Returns all the network identity objects owned by the given client.If the client id is -1, it returns all the objects owned by the server. Clientpublic int GetLocalClientIndex int clientId Returns the index of the local client with the given id. Clientpublic int GetLocalClientCount Returns the number of local clients. Clientpublic ReadOnlySpan&lt;int&gt; GetLocalClientIds returns the client id of all local clients. public static GameObject GetPrefabById NetworkId prefab Returns the prefab object registered with the given id. public static NetworkId GetIdForPrefab GameObject prefab Returns the id of a registered prefab. public static bool IsPrefabValid NetworkId prefab Checks if the prefab is registered. Requires Authoritypublic NetworkAction&lt;NetworkId,NetworkIdentity&gt; MoveToScene int sceneId Moves this object to a different scene.Requires authority. Requires Authoritypublic void MoveToScene string sceneName Moves this object to a different scene.Requires authority. public static IEnumerable&lt;string&gt; GetLoadedScenes Returns the name of all the scenes loaded on the network. public static int GetSceneId string sceneName Returns the id of the scene with the given name. public static string GetSceneName int sceneId Returns the name of the scene with the given id. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn GameObject prefab Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn GameObject prefabVector3 positionQuaternion rotationbool active Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn GameObject prefabVector3 positionQuaternion rotationint owner Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn GameObject prefabVector3 positionQuaternion rotation Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn GameObject prefabVector3 positionQuaternion rotationVector3 scalebool activeint owner = -1int scene = -1 Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded.If the scene id is 0, the object will be spawned in the main scene.If the scene id is -1, the object will be spawned in the last loaded scene.If the owner id is -1, the object will be owned by the server. public static NetworkAction&lt;NetworkId,NetworkIdentity&gt; Spawn NetworkId prefabIdVector3 positionQuaternion rotationVector3 scalebool activeint owner = -1int scene = -1 Spawns a prefab object on the network.If the object does not have a NetworkIdentity component, the NetworkId will be discarded.If the scene id is 0, the object will be spawned in the main scene.If the scene id is -1, the object will be spawned in the last loaded scene.If the owner id is -1, the object will be owned by the server."},{"location":"api_reference/#networkidnetworkvalue","title":"NetworkIdNetworkValue","text":"Class NetBuff.Misc.NetworkIdNetworkValue <p>Info</p> <p>Used to store a NetworkId value that is synchronized over the network.Used to keep reference to other network objets throughout the network.</p>"},{"location":"api_reference/#implements_16","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_25","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#networkloadscenepacket","title":"NetworkLoadScenePacket","text":"Class NetBuff.Packets.NetworkLoadScenePacket <p>Info</p> <p>Packet sent from the server to the client to inform the client to load a scene.</p>"},{"location":"api_reference/#implements_17","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_16","title":"Properties","text":"Property Accessors Description public string SceneName Get Set The name of the scene to load."},{"location":"api_reference/#methods_26","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networkmanager","title":"NetworkManager","text":"Class NetBuff.NetworkManager <p>Info</p> <p>Main NetBuff component that manages the network environment, network objects, network behaviours callbacks, packetsending and receiving, session data, and scene management.This component should be placed in the scene that will be used as the main scene for the network environment.NetworkManager is a singleton class, meaning that only one instance of this component can exist in the scene.</p>"},{"location":"api_reference/#properties_17","title":"Properties","text":"Property Accessors Description public static NetworkManager Instance Get Set Singleton instance of the NetworkManager component. public string Name Get Set Name of the network environment. Used to name the server. public int VersionMagicNumber Get Set Used to check if versions and projects and compatible.When a client connects to a server, the server will check if the client's version magic number matches the server'sversion magic number. public int DefaultTickRate Get Set Default tick rate of the network environment.Used by components that require a tick rate, such as NetworkTransform. public bool SpawnsPlayer Get Set Determines if the server should spawn a player object for the client when they connect. public bool SupportsSessionRestoration Get Set Determines if the network environment supports session restoration. public NetworkTransport Transport Get Set Determines the network transport used by the network environment. public NetworkPrefabRegistry PrefabRegistry Get Set Determines the network prefab registry used by the network environment. public GameObject PlayerPrefab Get Set Determines the player prefab used by the network environment.The prefab needs to be registered in the network prefab registry. public bool IsClientRunning Get Set Determines if the local client is running. public bool IsServerRunning Get Set Determines if the local server is running. public IList&lt;NetworkBehaviour&gt; DirtyBehaviours Get Returns all network objects that have to be synchronized. public NetworkTransport.EnvironmentType EnvironmentType Get Returns the environment type of the network transport. Clientpublic IConnectionInfo ClientConnectionInfo Get Returns the connection info of the client.Can only be accessed on the client. Clientpublic ReadOnlySpan&lt;int&gt; LocalClientIds Get Returns all the local client ids.Can only be accessed on the client. public string MainScene Get Returns the name of the main scene.The main scene is the scene where the NetworkManager component is placed. public IEnumerable&lt;string&gt; LoadedScenes Get Returns all the loaded scenes. public int LoadedSceneCount Get Returns the number of loaded scenes. public string LastLoadedScene Get Returns the current last loaded scene.If a object is spawned or moved to the -1 scene, it will be placed on the last loaded scene."},{"location":"api_reference/#methods_27","title":"Methods","text":"Method Parameters Description public void StartClient Starts the network environment as client. public void StartServer Starts the network environment as server. public void StartHost Starts the network environment as host (server and client). public void Close Closes the network environment. public NetworkIdentity GetNetworkObject NetworkId id Returns the network identity object with the given id. public IEnumerable&lt;NetworkIdentity&gt; GetNetworkObjects Returns all the network identity objects. public int GetNetworkObjectCount Returns the number of network identity objects. public IEnumerable&lt;NetworkIdentity&gt; GetNetworkObjectsOwnedBy int owner Returns all the network identity objects owned by the given client.If the client id is -1, it returns all the objects owned by the server. protected void OnServerError string error Called when a error occurs on the server. protected void OnClientError string error Called when a error occurs on the client. protected void OnServerStart Called when the server starts. protected void OnServerStop NetworkTransport.ConnectionEndMode modestring cause Called when the server stops. protected void OnNetworkObjectSpawned NetworkIdentity identitybool retroactive Called when a network object is spawned./// The isRetroactive parameter is true if the client is joining the server after the object is already spawned. protected void OnNetworkObjectDespawned NetworkIdentity identity Called when a network object is despawned. Serverprotected void OnClientConnected int clientId Called when a client connects to the server.Only called on the server. Serverprotected void OnClientDisconnected int clientIdstring reason Called when a client disconnects from the server.Only called on the server. Serverprotected void OnSpawnPlayer int clientId Called when the server spawns a player object for the client.Only called on the server.Can be used to customize the player object spawn, such as setting the position and rotation. Clientprotected void OnConnect Called when the client connects to the server.Only called on the client. Clientprotected void OnDisconnect NetworkTransport.ConnectionEndMode modestring reason Called when the client disconnects from the server.Only called on the client. Serverprotected void OnServerReceivePacket int clientIdIPacket packet Called when the server receives a packet from a client.Only called on the server. protected void OnClientReceivePacket IPacket packet Called when the client receives a packet from the server.Only called on the client. protected void OnClearEnvironment NetworkTransport.ConnectionEndMode modestring cause Called when the network environment is cleared.Occurs when the server stops or the client disconnects. protected GameObject OnSpawnObject NetworkId idNetworkId prefabIdGameObject prefabVector3 positionQuaternion rotationVector3 scalebool activeint ownerint sceneId Called when a network object is spawned.Can be used to customize the object spawn, such as setting the position and rotation.Note: Changes made here are not synchronized through the network automatically and may be overwritten by the objectowner. protected void OnDespawnObject GameObject o Called when a network object is despawned. protected SessionData OnCreateEmptySessionData Used to create a empty session data object.No data should be initialized here. Clientprotected NetworkSessionEstablishRequestPacket OnCreateSessionEstablishRequest Used to create a session establish request packet.Called when the client connects to the server.Called only on the client. Clientprotected void OnLocalSessionDataChanged SessionData data Called when the session data of the client changes.Changes only occur when the server updates the session data via ApplyChangesCalled only on the client. Serverprotected SessionData OnRestoreSessionData int clientIdNetworkSessionEstablishRequestPacket requestPacket Used to restore the session data of the client.If the client has disconnected and the server supports session restoration, this method is called to restore thesession data.If no session data is found, the client will be treated as a new client.Note that the client id is not kept between sessions, only the session custom data.Called only on the server. Serverprotected SessionData OnCreateNewSessionData int clientIdNetworkSessionEstablishRequestPacket requestPacket Called when no restored session data is found.Called only on the server. Serverprotected SessionEstablishingResponse OnSessionEstablishingRequest NetworkSessionEstablishRequestPacket requestPacket Called when the server receives a session establish request packet.Here the server can accept or reject the client connection.If the server rejects the connection, the client will be disconnected.Called only on the server. Serverprotected void SpawnNetworkObjectForClients NetworkId prefabIdVector3 positionQuaternion rotationVector3 scaleint owner = -1int scene = -1 Spawns a network object for all clients.Shall only be used internally.Called only on the server. Serverprotected void SetNetworkObjectOwnerForClients NetworkId idint owner Sets the owner of the network object for all clients.Shall only be used internally.Called only on the server. Serverprotected void SetNetworkObjectActiveForClients NetworkId idbool active Sets the active state of the network object for all clients.Shall only be used internally.Called only on the server. Serverprotected void DespawnNetworkObjectForClients NetworkId id Despawns the network object for all clients.Shall only be used internally.Called only on the server. Serverprotected void MoveObjectToScene NetworkId idint sceneId Used to move a network object to another scene.Shall only be used internally.Called only on the server. Clientpublic void ClientSendPacket IPacket packetbool reliable = false Sends a packet to the server.Called only on the client. Serverpublic void ServerSendPacket IPacket packetint target = -1bool reliable = false Sends a packet to a client.If the target is -1, the packet is sent to all clients.Called only on the server. Serverpublic void BroadcastServerPacket IPacket packetbool reliable = false Broadcasts a packet to all clients.Called only on the server. Serverpublic void BroadcastServerPacketExceptFor IPacket packetint exceptbool reliable = false Broadcasts a packet to all clients except for the given client.Called only on the server. public int GetSceneId string sceneName Returns the scene id of the given scene name.If the scene name is not found, returns -1. public string GetSceneName int sceneId Returns the scene name of the given scene id.If the scene id is -1, returns the last loaded scene.If the scene id is 0, returns the main scene. Serverpublic NetworkAction&lt;string,int&gt; LoadScene string sceneName Loads a scene through the network.Called only on the server. Serverpublic NetworkAction&lt;string,int&gt; UnloadScene string sceneName Unloads a scene through the network.Called only on the server. public bool IsSceneLoaded string sceneName Checks if the scene is loaded. Serverpublic IEnumerable&lt;int&gt; GetConnectedClients Returns the id of all connected clients.Called only on the server. Serverpublic int GetConnectedClientCount Returns the count of all connected clients.Called only on the server. Serverpublic bool TryGetSessionData int clientIdT data Try to get the session data of the client.Called only on the server. Serverpublic IEnumerable GetAllSessionData Returns the session data of all connected clients.Called only on the server. Serverpublic IEnumerable GetAllDisconnectedSessionData Returns the session data of all disconnected clients.Called only on the server. Serverpublic void ClearAllDisconnectedSessionData Clears all disconnected session data.Called only on the server. Serverpublic void SendSessionDataToClient int clientId Re-syncs the session data of the client.Called only on the server. Serverpublic void SendSessionDataToClient SessionData data Re-syncs the session data of the client.Called only on the server. Clientpublic T GetLocalSessionData int clientId = -1 Returns the session data of the local client.Called only on the client."},{"location":"api_reference/#networkmanagergui","title":"NetworkManagerGUI","text":"Class NetBuff.NetworkManagerGUI <p>Info</p> <p>NetworkManagerGUI is a simple GUI for NetworkManager.Provides a simple way to start a server, client, or host.Also provides a way to see the server list and connect to them.Can plot graphs for FPS, Latency, Packet Sent, Packet Received, and Packet Loss.Displays the current status of the server and client.</p>"},{"location":"api_reference/#properties_18","title":"Properties","text":"Property Accessors Description public bool PlotFPS Get Set Determines whether the FPS graph is plotted. public bool PlotLatency Get Set Determines whether the Latency graph is plotted. public bool PlotPacketRate Get Set Determines whether the Packet Rate graph is plotted. public CurrentGraph CurrentGraphType Get Set Determines the current rendered graph type."},{"location":"api_reference/#networkobjectactivepacket","title":"NetworkObjectActivePacket","text":"Class NetBuff.Packets.NetworkObjectActivePacket <p>Info</p> <p>Packet used to change the active state of a network object.</p>"},{"location":"api_reference/#implements_18","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_19","title":"Properties","text":"Property Accessors Description public NetworkId Id Get Set The network id of the network object. public bool IsActive Get Set The active state of the network object."},{"location":"api_reference/#methods_28","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networkobjectdespawnpacket","title":"NetworkObjectDespawnPacket","text":"Class NetBuff.Packets.NetworkObjectDespawnPacket <p>Info</p> <p>Packet used to despawn a network object.</p>"},{"location":"api_reference/#implements_19","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_20","title":"Properties","text":"Property Accessors Description public NetworkId Id Get Set The network id of the network object."},{"location":"api_reference/#methods_29","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networkobjectmovescenepacket","title":"NetworkObjectMoveScenePacket","text":"Class NetBuff.Packets.NetworkObjectMoveScenePacket <p>Info</p> <p>Packet used to move a network object to a new scene.</p>"},{"location":"api_reference/#implements_20","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_21","title":"Properties","text":"Property Accessors Description public NetworkId Id Get Set The network id of the network object. public int SceneId Get Set The scene id to move the network object to."},{"location":"api_reference/#methods_30","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networkobjectownerpacket","title":"NetworkObjectOwnerPacket","text":"Class NetBuff.Packets.NetworkObjectOwnerPacket <p>Info</p> <p>Packet used to change the owner of a network object.</p>"},{"location":"api_reference/#implements_21","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_22","title":"Properties","text":"Property Accessors Description public NetworkId Id Get Set The network id of the network object. public int OwnerId Get Set The owner id of the network object."},{"location":"api_reference/#methods_31","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networkobjectspawnpacket","title":"NetworkObjectSpawnPacket","text":"Class NetBuff.Packets.NetworkObjectSpawnPacket <p>Info</p> <p>Packet used to spawn a network object.</p>"},{"location":"api_reference/#implements_22","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_23","title":"Properties","text":"Property Accessors Description public NetworkId Id Get Set The network id of the network object. public NetworkId PrefabId Get Set The network id of the prefab. public int OwnerId Get Set The owner id of the network object.If the owner id is -1, the object will be owned by the server. public Vector3 Position Get Set The position of the network object. public Quaternion Rotation Get Set The rotation of the network object. public Vector3 Scale Get Set The scale of the network object. public bool IsActive Get Set The active state of the network object. public int SceneId Get Set The scene id of the network object.If the scene id is 0, the object will be spawned in the main scene.If the scene id is -1, the object will be spawned in the last loaded scene."},{"location":"api_reference/#methods_32","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networkpreexistinginfopacket","title":"NetworkPreExistingInfoPacket","text":"Class NetBuff.Packets.NetworkPreExistingInfoPacket <p>Info</p> <p>Packet used to send information about pre-existing objects in the network.</p>"},{"location":"api_reference/#implements_23","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_24","title":"Properties","text":"Property Accessors Description public PreExistingState[] PreExistingObjects Get Set The pre-existing objects in the network. public NetworkId[] RemovedObjects Get Set The id of the pre-existing objects that were removed from the network. public string[] SceneNames Get Set The names of the scenes that are loaded in the network. public NetworkObjectSpawnPacket[] SpawnedObjects Get Set The spawned objects in the network. public NetworkBehaviourDataPacket[] NetworkValues Get Set The data of the network behaviours in the network."},{"location":"api_reference/#methods_33","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networkpreexistingresponsepacket","title":"NetworkPreExistingResponsePacket","text":"Class NetBuff.Packets.NetworkPreExistingResponsePacket <p>Info</p> <p>Packet used to confirm that the client has synchronized the server state.This allows the server to confirm the client connection.</p>"},{"location":"api_reference/#implements_24","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#methods_34","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networkprefabregistry","title":"NetworkPrefabRegistry","text":"Class NetBuff.NetworkPrefabRegistry <p>Info</p> <p>Registry of prefabs that can be spawned by the network.All the objects that are spawned at runtime by the network must be registered here.</p>"},{"location":"api_reference/#properties_25","title":"Properties","text":"Property Accessors Description public SerializedDictionary&lt;NetworkId,GameObject&gt; Prefabs Get Registry of prefabs that can be spawned by the network."},{"location":"api_reference/#methods_35","title":"Methods","text":"Method Parameters Description public bool IsPrefabValid NetworkId id Check if a prefab id is valid. public bool IsPrefabValid GameObject prefab Check if a prefab is valid. public NetworkId GetPrefabId GameObject prefab Returns the prefab id of a prefab. public GameObject GetPrefab NetworkId id Returns the prefab of a prefab id. public IEnumerable GetAllPrefabs Returns all the prefabs."},{"location":"api_reference/#networkrigidbodytransform","title":"NetworkRigidbodyTransform","text":"Class NetBuff.Components.NetworkRigidbodyTransform <p>Info</p> <p>Syncs the components of a transform over the network, along with the velocity and angular velocity of a Rigidbody.</p>"},{"location":"api_reference/#implements_25","title":"Implements","text":"NetBuff.Components.NetworkTransform"},{"location":"api_reference/#properties_26","title":"Properties","text":"Property Accessors Description public Rigidbody Rigidbody Get The Rigidbody component to sync. public bool SyncVelocity Get Set Defines whether the velocity should be synced. public float VelocityThreshold Get Set Defines the threshold for the velocity to be considered changed. public bool SyncAngularVelocity Get Set Defines whether the angular velocity should be synced. public float AngularVelocityThreshold Get Set Defines the threshold for the angular velocity to be considered changed. public bool SyncIsKinematic Get Set Defines whether the isKinematic property should be synced."},{"location":"api_reference/#methods_36","title":"Methods","text":"Method Parameters Description protected bool ShouldResendOverrides TransformPacket packet Determines if the transform should be resent to the server. protected void ApplyTransformPacketOverrides TransformPacket packet Applies the transform components to the transform."},{"location":"api_reference/#networksessiondatapacket","title":"NetworkSessionDataPacket","text":"Class NetBuff.Packets.NetworkSessionDataPacket <p>Info</p> <p>Packet used to synchronize the session data of a client.</p>"},{"location":"api_reference/#implements_26","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_27","title":"Properties","text":"Property Accessors Description public int ClientId Get Set The id of the client. public ArraySegment&lt;byte&gt; Data Get Set The data of the session."},{"location":"api_reference/#methods_37","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networksessionestablishrequestpacket","title":"NetworkSessionEstablishRequestPacket","text":"Class NetBuff.Packets.NetworkSessionEstablishRequestPacket <p>Info</p> <p>Base packet for all session establish request packets.</p>"},{"location":"api_reference/#implements_27","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#methods_38","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networktransform","title":"NetworkTransform","text":"Class NetBuff.Components.NetworkTransform <p>Info</p> <p>Syncs the components of a transform over the network.</p>"},{"location":"api_reference/#implements_28","title":"Implements","text":"NetBuff.Components.NetworkBehaviour"},{"location":"api_reference/#properties_28","title":"Properties","text":"Property Accessors Description public int TickRate Get Set Determines the tick rate of the NetworkAnimator. When set to -1, the default tick rate of the NetworkManager willbe used. public float PositionThreshold Get Set Defines the threshold for the position to be considered changed. public float RotationThreshold Get Set Defines the threshold for the rotation to be considered changed. public float ScaleThreshold Get Set Defines the threshold for the scale to be considered changed. public SyncMode SyncModeMask Get Defines which components of the transform should be synced."},{"location":"api_reference/#methods_39","title":"Methods","text":"Method Parameters Description public void OnOwnershipChangedOverrides int oldOwnerint newOwner Called when the owner of this object changes. public void OnSpawnedOverrides bool isRetroactive Called when this object is spawned on the network.Called when the network environment initializes if the object already exists.The isRetroactive parameter is true if the client is joining the server after the object is already spawned. public void OnServerReceivePacketOverrides IOwnedPacket packetint clientId Called when the server receives a packet owned by this object from a client public void OnClientReceivePacketOverrides IOwnedPacket packet Called when the clients receive a packet owned by this object from the server. protected bool ShouldResend TransformPacket packet Determines if the transform should be resent to the server. protected void ApplyTransformPacket TransformPacket packet Applies the transform components to the transform."},{"location":"api_reference/#networktransport","title":"NetworkTransport","text":"Class NetBuff.NetworkTransport <p>Info</p> <p>Base class for network transport.Responsible for internally managing the connection between the server and clients.Holds the connection information of clients and provides methods for sending and receiving packets.</p>"},{"location":"api_reference/#properties_29","title":"Properties","text":"Property Accessors Description public EnvironmentType Type Get Set The current type of the network environment. Clientpublic IConnectionInfo ClientConnectionInfo Get Set The local client connection to the server information. public Action&lt;int,IPacket&gt; OnServerPacketReceived Get Set The callback that will be called when a packet is received by the server. public Action&lt;IPacket&gt; OnClientPacketReceived Get Set The callback that will be called when a packet is received by the client. public Action&lt;int&gt; OnClientConnected Get Set The callback that will be called when a client is connected to the server. public Action&lt;int,string&gt; OnClientDisconnected Get Set The callback that will be called when a client is disconnected from the server. public Action OnConnect Get Set The callback that will be called when the client connects to the server. public Action&lt;ConnectionEndMode,string&gt; OnDisconnect Get Set The callback that will be called when the client disconnects from the server. public Action OnServerStart Get Set The callback that will be called when the server starts. public Action&lt;ConnectionEndMode,string&gt; OnServerStop Get Set The callback that will be called when the server stops."},{"location":"api_reference/#methods_40","title":"Methods","text":"Method Parameters Description public ServerDiscoverer GetServerDiscoverer Returns a new discoverer that will be used to find available servers. public void StartHost int magicNumber Starts the network transport as a host (server and client). public void StartServer Starts the network transport as a server. public void StartClient int magicNumber Starts the network transport as a client. public void Close Closes the network transport. Serverpublic IClientConnectionInfo GetClientInfo int id Returns the connection information of the client with the given id. Serverpublic int GetClientCount Returns the number of clients connected to the server. Serverpublic IEnumerable&lt;IClientConnectionInfo&gt; GetClients Returns all the clients connected to the server. Clientpublic void ClientDisconnect string reason Disconnects the client from the server. Serverpublic void ServerDisconnect int idstring reason Disconnects the client with the given id from the server. Clientpublic void ClientSendPacket IPacket packetbool reliable = false Sends a packet to the server.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. Serverpublic void ServerSendPacket IPacket packetint target = -1bool reliable = false Sends a packet to the client with the given id.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered.If the target is -1, the packet will be sent to all clients connected to the server. Serverpublic void BroadcastServerPacket IPacket packetbool reliable = false Broadcasts a packet to all clients connected to the server.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered."},{"location":"api_reference/#networkunloadscenepacket","title":"NetworkUnloadScenePacket","text":"Class NetBuff.Packets.NetworkUnloadScenePacket <p>Info</p> <p>Packet sent from the server to the client to inform the client to unload a scene.</p>"},{"location":"api_reference/#implements_29","title":"Implements","text":"NetBuff.Interface.IPacket"},{"location":"api_reference/#properties_30","title":"Properties","text":"Property Accessors Description public string SceneName Get Set The name of the scene to unload."},{"location":"api_reference/#methods_41","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#networkvalue","title":"NetworkValue","text":"Class NetBuff.Misc.NetworkValue <p>Info</p> <p>Base class for all network values.Used to store values that are synchronized over the network.</p>"},{"location":"api_reference/#properties_31","title":"Properties","text":"Property Accessors Description public NetworkBehaviour AttachedTo Get Set The behaviour that this value is attached to."},{"location":"api_reference/#methods_42","title":"Methods","text":"Method Parameters Description public void Serialize BinaryWriter writer Serializes the value to a binary writer. public void Deserialize BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#networkvaluet","title":"NetworkValue&lt;T&gt;","text":"Class NetBuff.Misc.NetworkValue&lt;T&gt; <p>Info</p> <p>Base class for all network values.Used to store values that are synchronized over the network.</p>"},{"location":"api_reference/#implements_30","title":"Implements","text":"NetBuff.Misc.NetworkValue"},{"location":"api_reference/#properties_32","title":"Properties","text":"Property Accessors Description public T Value Get Set The value of this network value.Can only be set if the local environment has permission.Use the CheckPermission method to check if the environment has permission."},{"location":"api_reference/#methods_43","title":"Methods","text":"Method Parameters Description public bool CheckPermission Checks if the environment has permission to modify this value. protected void SetValueCalling T newValue Used to set the value of this network value.Shall only be used internally. public string ToString Returns a string representation of this network value."},{"location":"api_reference/#packetlistener","title":"PacketListener","text":"Class NetBuff.Misc.PacketListener <p>Info</p> <p>Base class for packet listenersUsed to listen for packets and call events when a packet is received</p>"},{"location":"api_reference/#methods_44","title":"Methods","text":"Method Parameters Description public static PacketListener GetPacketListener Returns the packet listener for the given packet type. public static PacketListener GetPacketListener Type type Returns the packet listener for the given packet type. public bool CallOnServerReceive IPacket packetint client Call the OnServerReceive event.Can be used to simulate a server receiving a packet. public bool CallOnClientReceive IPacket packet Call the OnClientReceive event.Can be used to simulate a client receiving a packet."},{"location":"api_reference/#packetlistenert","title":"PacketListener&lt;T&gt;","text":"Class NetBuff.Misc.PacketListener&lt;T&gt; <p>Info</p> <p>Generic packet listener. Used to listen for packets of a specific type.</p>"},{"location":"api_reference/#implements_31","title":"Implements","text":"NetBuff.Misc.PacketListener"},{"location":"api_reference/#methods_45","title":"Methods","text":"Method Parameters Description public void AddServerListener Funcint\\,\\bool\\&gt; callback public void AddClientListener Funcbool\\&gt; callback public void RemoveServerListener Funcint\\,\\bool\\&gt; callback public void RemoveClientListener Funcbool\\&gt; callback public bool CallOnServerReceiveOverrides IPacket packetint client Call the OnServerReceive event.Can be used to simulate a server receiving a packet. public bool CallOnClientReceiveOverrides IPacket packet Call the OnClientReceive event.Can be used to simulate a client receiving a packet."},{"location":"api_reference/#packetregistry","title":"PacketRegistry","text":"Class NetBuff.PacketRegistry <p>Info</p> <p>A registry for packet types.Allows for easy creation of packets by ID.</p>"},{"location":"api_reference/#methods_46","title":"Methods","text":"Method Parameters Description public static void RegisterPacket Registers a packet type. public static void RegisterPacket Type type Registers a packet type. public static void Clear Clears the registry. public static int GetId Returns the id of a packet type. public static int GetId IPacket packet Returns the id of a packet. public static IPacket CreatePacket int id Creates a packet by its id."},{"location":"api_reference/#platform","title":"Platform","text":"Enum NetBuff.Misc.Platform <p>Info</p> <p>Represents the platform the application is running on.</p>"},{"location":"api_reference/#enum-values_5","title":"Enum Values","text":"Value Description Desktop A generic desktop platform. Windows The Windows platform (editor or player). Linux The Linux platform. MacOS The MacOS platform (editor or player). Mobile A generic mobile platform. Android Android platform. IOS iOS platform. Unknown Unknown platform."},{"location":"api_reference/#platformextensions","title":"PlatformExtensions","text":"Class NetBuff.Misc.PlatformExtensions <p>Info</p> <p>Utility class for platform related operations.</p>"},{"location":"api_reference/#methods_47","title":"Methods","text":"Method Parameters Description public static Platform GetPlatform Returns the platform the application is running on."},{"location":"api_reference/#preexistingstate","title":"PreExistingState","text":"Class NetBuff.Packets.NetworkPreExistingInfoPacket.PreExistingState <p>Info</p> <p>Represents the state of a pre-existing object in the network.</p>"},{"location":"api_reference/#properties_33","title":"Properties","text":"Property Accessors Description public NetworkId Id Get Set The id of the object. public NetworkId PrefabId Get Set The id of the prefab. public int OwnerId Get Set The id of the owner of the object. public Vector3 Position Get Set The position of the object. public Quaternion Rotation Get Set The rotation of the object. public Vector3 Scale Get Set The scale of the object. public bool IsActive Get Set The state of the object. public int SceneId Get Set The id of the scene where the object is."},{"location":"api_reference/#quaternionnetworkvalue","title":"QuaternionNetworkValue","text":"Class NetBuff.Misc.QuaternionNetworkValue <p>Info</p> <p>Used to store a Quaternion value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_32","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_48","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#requiresauthorityattribute","title":"RequiresAuthorityAttribute","text":"Class NetBuff.Misc.RequiresAuthorityAttribute <p>Info</p> <p>Used to mark a method, field or property as requiring authority.If a method, field or property is marked with this attribute, it will only be used if the local environment hasauthority over the object.</p>"},{"location":"api_reference/#serverdiscoverer","title":"ServerDiscoverer","text":"Class NetBuff.Discover.ServerDiscoverer <p>Info</p> <p>Base class for server discovery. Used to find servers and retrieve their information.</p>"},{"location":"api_reference/#methods_49","title":"Methods","text":"Method Parameters Description public void Search Action&lt;ServerInfo&gt; onFindServerAction onFinish Start searching for servers.For each server found, the onFindServer callback will be called.After the search is finished, the onFinish callback will be called. public void Cancel Cancel the search.When this method is called, the onFinish callback will not be called."},{"location":"api_reference/#serverdiscoverert","title":"ServerDiscoverer&lt;T&gt;","text":"Class NetBuff.Discover.ServerDiscoverer&lt;T&gt; <p>Info</p> <p>Base class for server discovery. Used to find servers and retrieve their information.</p>"},{"location":"api_reference/#implements_33","title":"Implements","text":"NetBuff.Discover.ServerDiscoverer"},{"location":"api_reference/#methods_50","title":"Methods","text":"Method Parameters Description public void SearchOverrides Action onFindServerAction onFinish Start searching for servers.For each server found, the onFindServer callback will be called.After the search is finished, the onFinish callback will be called. public void Search Action&lt;ServerInfo&gt; onFindServerAction onFinish Start searching for servers.For each server found, the onFindServer callback will be called.After the search is finished, the onFinish callback will be called."},{"location":"api_reference/#serverinfo","title":"ServerInfo","text":"Class NetBuff.Discover.ServerDiscoverer.ServerInfo <p>Info</p> <p>Holds the information about a server.</p>"},{"location":"api_reference/#properties_34","title":"Properties","text":"Property Accessors Description public string Name Get Set The server's name. Normally the host's name. public int Players Get Set The number of players currently in the server. public int MaxPlayers Get Set The maximum number of players that can join the server at the same time. public Platform Platform Get Set The platform the server is running on. public bool HasPassword Get Set Returns true if the server is password protected. public string Method Get Set Returns the method used to connect to the server (UDP, Bluetooth, etc)."},{"location":"api_reference/#methods_51","title":"Methods","text":"Method Parameters Description public string ToString Format the server information to a string. public bool Join Join the server."},{"location":"api_reference/#serveronlyattribute","title":"ServerOnlyAttribute","text":"Class NetBuff.Misc.ServerOnlyAttribute <p>Info</p> <p>Used to mark a method, field or property as server only.This means that the method, field or property will only be used on the server side.</p>"},{"location":"api_reference/#sessiondata","title":"SessionData","text":"Class NetBuff.Session.SessionData <p>Info</p> <p>Base class for session data. Used to store data such as client score, team, etc.Persistent in case of reconnection. Check Managing Sessions section in the documentation for more info.</p>"},{"location":"api_reference/#properties_35","title":"Properties","text":"Property Accessors Description public int ClientId Get Holds the client id that owns this session data."},{"location":"api_reference/#methods_52","title":"Methods","text":"Method Parameters Description public void Serialize BinaryWriter writerbool shouldSerializeEverything Serializes data to byte array.The parameter shouldSerializeEverything will only be true when the server is hot-reloading. public void Deserialize BinaryReader readerbool shouldDeserializeEverything Deserializes data from byte array.The parameter shouldDeserializeEverything will only be true when the server is hot-reloading. Serverpublic void ApplyChanges Used to re-sync data to the client."},{"location":"api_reference/#sessionestablishingresponse","title":"SessionEstablishingResponse","text":"Struct NetBuff.Session.SessionEstablishingResponse <p>Info</p> <p>Response to a session establishing request.If the response is accept, the session will be established.If the response is reject, the session will not be established, and the client will be disconnected.</p>"},{"location":"api_reference/#properties_36","title":"Properties","text":"Property Accessors Description public SessionEstablishingResponseType Type Get Set The type of response. public string Reason Get Set The reason for rejecting the session establishing request."},{"location":"api_reference/#sessionestablishingresponsetype","title":"SessionEstablishingResponseType","text":"Enum NetBuff.Session.SessionEstablishingResponseType"},{"location":"api_reference/#enum-values_6","title":"Enum Values","text":"Value Description Accept Accept the session establishing request. Reject Reject the session establishing request."},{"location":"api_reference/#shortnetworkvalue","title":"ShortNetworkValue","text":"Class NetBuff.Misc.ShortNetworkValue <p>Info</p> <p>Used to store a short value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_34","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_53","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#stringnetworkvalue","title":"StringNetworkValue","text":"Class NetBuff.Misc.StringNetworkValue <p>Info</p> <p>Used to store a string value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_35","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_54","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#syncmode","title":"SyncMode","text":"Enum NetBuff.Components.NetworkTransform.SyncMode"},{"location":"api_reference/#enum-values_7","title":"Enum Values","text":"Value Description None No components are synced. PositionX The x position of the transform is synced. PositionY The y position of the transform is synced. PositionZ The z position of the transform is synced. RotationX The x rotation of the transform is synced. RotationY The y rotation of the transform is synced. RotationZ The z rotation of the transform is synced. ScaleX The x scale of the transform is synced. ScaleY The y scale of the transform is synced. ScaleZ The z scale of the transform is synced."},{"location":"api_reference/#transformpacket","title":"TransformPacket","text":"Class NetBuff.Components.TransformPacket <p>Info</p> <p>Packet used to sync the transform components.</p>"},{"location":"api_reference/#implements_36","title":"Implements","text":"NetBuff.Interface.IOwnedPacket"},{"location":"api_reference/#properties_37","title":"Properties","text":"Property Accessors Description public float[] Components Get Set The components of the transform. public short Flag Get Set Determines which components have been changed. public NetworkId IdOverrides Get Set The id of the owner of the packet."},{"location":"api_reference/#methods_55","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the packet to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the packet from a binary reader."},{"location":"api_reference/#udpnetworktransport","title":"UDPNetworkTransport","text":"Class NetBuff.UDP.UDPNetworkTransport <p>Info</p> <p>Uses the UDP (User Datagram Protocol) protocol to manage the connection between the server and clients.Responsible for internally managing the connection between the server and clients.Holds the connection information of clients and provides methods for sending and receiving packets.</p>"},{"location":"api_reference/#implements_37","title":"Implements","text":"NetBuff.NetworkTransport"},{"location":"api_reference/#properties_38","title":"Properties","text":"Property Accessors Description public string Address Get Set The address of the server. public int Port Get Set The port of the server / client connection. public string Password Get Set The password of the server.The password that the client is using to connect to the server. public int MaxClients Get Set The maximum number of clients that can connect to the server at the same time."},{"location":"api_reference/#methods_56","title":"Methods","text":"Method Parameters Description public ServerDiscoverer GetServerDiscovererOverrides Returns a new discoverer that will be used to find available servers. public void StartHostOverrides int magicNumber Starts the network transport as a host (server and client). public void StartServerOverrides Starts the network transport as a server. public void StartClientOverrides int magicNumber Starts the network transport as a client. public void CloseOverrides Closes the network transport. public IClientConnectionInfo GetClientInfoOverrides int id Returns the connection information of the client with the given id. public int GetClientCountOverrides Returns the number of clients connected to the server. public IEnumerable&lt;IClientConnectionInfo&gt; GetClientsOverrides Returns all the clients connected to the server. public void ClientDisconnectOverrides string reason Disconnects the client from the server. public void ServerDisconnectOverrides int idstring reason Disconnects the client with the given id from the server. public void ClientSendPacketOverrides IPacket packetbool reliable = false Sends a packet to the server.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered. public void ServerSendPacketOverrides IPacket packetint target = -1bool reliable = false Sends a packet to the client with the given id.You can choose if the packet should be reliable or not.Reliable packets are guaranteed to be delivered, but they are a little slower.Non-reliable packets are faster, but they are not guaranteed to be delivered.If the target is -1, the packet will be sent to all clients connected to the server."},{"location":"api_reference/#udpserverdiscoverer","title":"UDPServerDiscoverer","text":"Class NetBuff.UDP.UDPServerDiscoverer <p>Info</p> <p>Used to find all available servers using UDP.Searches through all available network interfaces and sends a broadcast message to find servers.</p>"},{"location":"api_reference/#implements_38","title":"Implements","text":"NetBuff.Discover.ServerDiscoverer&lt;T&gt;"},{"location":"api_reference/#methods_57","title":"Methods","text":"Method Parameters Description public void SearchOverrides Action&lt;UDPServerInfo&gt; onFindServerAction onFinish Start searching for servers.For each server found, the onFindServer callback will be called.After the search is finished, the onFinish callback will be called. public void CancelOverrides Cancel the search.When this method is called, the onFinish callback will not be called."},{"location":"api_reference/#udpserverinfo","title":"UDPServerInfo","text":"Class NetBuff.UDP.UDPServerDiscoverer.UDPServerInfo <p>Info</p> <p>Holds the information about a UDP server.</p>"},{"location":"api_reference/#implements_39","title":"Implements","text":"NetBuff.Discover.ServerDiscoverer.ServerInfo"},{"location":"api_reference/#properties_39","title":"Properties","text":"Property Accessors Description public IPAddress Address Get Set The server's IP address."},{"location":"api_reference/#methods_58","title":"Methods","text":"Method Parameters Description public string ToStringOverrides Format the server information to a string. public bool JoinOverrides Join the server."},{"location":"api_reference/#vector2networkvalue","title":"Vector2NetworkValue","text":"Class NetBuff.Misc.Vector2NetworkValue <p>Info</p> <p>Used to store a Vector2 value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_40","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_59","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#vector3networkvalue","title":"Vector3NetworkValue","text":"Class NetBuff.Misc.Vector3NetworkValue <p>Info</p> <p>Used to store a Vector3 value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_41","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_60","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"api_reference/#vector4networkvalue","title":"Vector4NetworkValue","text":"Class NetBuff.Misc.Vector4NetworkValue <p>Info</p> <p>Used to store a Vector4 value that is synchronized over the network.</p>"},{"location":"api_reference/#implements_42","title":"Implements","text":"NetBuff.Misc.NetworkValue&lt;T&gt;"},{"location":"api_reference/#methods_61","title":"Methods","text":"Method Parameters Description public void SerializeOverrides BinaryWriter writer Serializes the value to a binary writer. public void DeserializeOverrides BinaryReader reader Deserializes the value from a binary reader."},{"location":"components/","title":"Components","text":"<p>The image below presents a scheme with the main network components of NetBuff:</p> <p></p> <p>To develop your project, it is necessary to first understand the main functionalities of each part of the system. In the sections below, you can find information about each of the basic components.</p>"},{"location":"components/#network-manager","title":"Network Manager","text":"<p>The NetworkManager component is the main component of the system, responsible for controlling the state of objects, packet delivery, and data synchronization between clients and the server, as well as controlling the initialization of network parts.</p> <p></p>"},{"location":"components/#network-manager-gui","title":"Network Manager GUI","text":"<p>The NetworkManagerGUI component is created to facilitate initial system testing. It creates a user interface with basic controls as well as statistics about the current connection. It can plot graphs into the screen showing FPS, latency and packet incoming/outgoing rates.</p> <p></p> <p>Warning</p> <p>Using this component in a production environment is not recommended.</p>"},{"location":"components/#network-identity","title":"Network Identity","text":"<p>The NetworkIdentity component is used for the system to maintain references to objects in all network environments, that is, for the system to synchronize an object even on different machines. Every synchronized object needs to have a NetworkIdentity. In the inspector, the NetworkId of the identity is displayed, which is internally composed of 2 Int16 (totaling 32 bits), displayed as a string of 16 hexadecimal characters.</p> <p></p>"},{"location":"components/#ownership","title":"Ownership","text":"<p>Each NetworkIdentity is owned by some part of the network. The NetworkIdentity.OwnerId property stores the information about who is the current owner of the object, indicating the id of the client that has control over the object's state. By default, the value of NetworkIdentity.OwnerId is -1, indicating that the object is owned by the server. You can use the NetworkIdentity.IsOwnedByClient property to check if the object is owned by a client or not.</p> <p>The NetworkIdentity.HasAuthority property is used to check if the local environment (whether client, server, or host) has authority to modify the object in question, where some actions such as activating/deactivating or even changing the owner of the object require authority.</p> <pre><code>if (!HasAuthority)\n    return;\n\n//Transfer the ownership back to the server\nif(Input.GetKeyDown(KeyCode.S))\n    SetOwner(-1);\n</code></pre> <p>Tip</p> <p>Before performing any action on an object, remember to check the authority. In the case of a PlayerController, for example, only the owner of the object should have control over it.</p> <p>Warning</p> <p>When a client disconnects from the server, all objects controlled by it (NetworkIdentity.GetNetworkObjectsOwnedBy) are automatically despawned. You can use the NetworkBehaviour.OnClientDisconnected callback on the server to change the ownership of the object to avoid them being destroyed:</p> <pre><code>public override void OnClientDisconnected(int clientId)\n{\n    if (clientId == OwnerId)\n        ForceSetOwner(-1); //Sets the owner even without authority (Server-Only)\n}\n</code></pre>"},{"location":"components/#finding-objects","title":"Finding Objects","text":"<p>There are several ways to locate a NetworkIdentity, the main one being using the NetworkId through the NetworkIdentity.GetNetworkObject method. It is also possible to use the NetworkIdentity.GetNetworkObjectsOwnedBy method to find all objects owned by a certain client, or the NetworkIdentity.GetNetworkObjects method to return all registered NetworkIdentity objects.</p> <p>Tip</p> <p>Calling the NetworkIdentity.GetNetworkObjectsOwnedBy method with ownerId = -1, it is possible to find all objects owned by the server.</p>"},{"location":"components/#spawning-objects","title":"Spawning Objects","text":"<p>You can spawn NetworkIdentity objects using the NetworkIdentity.Spawn method using the prefab. At the time of spawn, it is also possible to configure the object in various ways:</p> <pre><code>Spawn(shotPrefab, cameraTransform.position + cameraTransform.forward * 1, cameraTransform.rotation, Vector3.one * 0.5f, true);\n</code></pre> <p>You can check which prefab was used to spawn an object by accessing the NetworkIdentity.PrefabId property. If an object was created in real-time, this value will be different from NetworkId.Empty. Pre-existing objects (created in the editor), even if they originated from a registered prefab, will not have a reference to the prefab.</p> <p>Tip</p> <p>When you spawn an object, you can choose who will own the object. If the field is omitted, the default value is -1, meaning the ownership of the NetworkIdentity will be of the server.</p> <p>Tip</p> <p>When you spawn an object, you can choose in which scene the object will appear. If the field is omitted, the default value is -1, meaning the object will go to the last loaded scene. See the Scene Management section for more information.</p> <p>Warning</p> <p>Remember to register your prefabs in the NetworkPrefabRegistry, otherwise, the system will not be able to spawn objects remotely. If the prefab is not registered, an error will occur. You can use the editor tool located in the NetBuff/Check Prefab Registries menu to check if there is any problem with your NetworkPrefabRegistry.</p>"},{"location":"components/#despawning-objects","title":"Despawning Objects","text":"<p>To despawn an object, simply use the NetworkIdentity.Despawn method. It is only possible to remove an object if the local server/client has authority over the object. If necessary, the server can use the NetworkIdentity.ForceSetOwner method first to gain permission to despawn the object.</p> <pre><code>ForceSetOwner(-1);\nDespawn();\n</code></pre>"},{"location":"components/#activating-deactivating-objects","title":"Activating / Deactivating Objects","text":"<p>During an object's existence, it's also possible to change its activation state using the method NetworkIdentity.SetActive. Changing an object's activation state is only possible if the local server/client has authority over the object. If necessary, the server can use the method NetworkIdentity.ForceSetOwner beforehand to gain permission to despawn the object.</p> <pre><code>ForceSetOwner(-1);\nSetActive(true);\n</code></pre>"},{"location":"components/#network-prefab-registry","title":"Network Prefab Registry","text":"<p>For NetBuff to be able to spawn objects over the network, it's necessary to maintain references to prefabs between clients and the server. Therefore, all prefabs that will be used to spawn objects in real-time (players, enemies, projectiles, etc.) must be registered in a NetworkPrefabRegistry, which should be referenced in the NetworkManager. Through the NetworkManager.PrefabRegistry property, you can reference which NetworkPrefabRegistry is being used.</p> <p></p> <p>Tip</p> <p>You can use the editor tool located in the NetBuff/Check Prefab Registries menu to check if there are any issues with your NetworkPrefabRegistry.</p>"},{"location":"components/#network-behaviour","title":"Network Behaviour","text":"<p>The NetworkBehaviour component serves as the basis for all other network components that are attached to a NetworkIdentity. They are primarily responsible for synchronizing an object's state and handling/controlling its behaviors. Unlike normal MonoBehaviours, they cannot be added/removed in real-time. Much of the logic in a project created using NetBuff will be contained in components implemented using NetworkBehaviour as a base.</p> <p></p> <p>Tip</p> <p>All properties and methods of the NetworkIdentity class have an interface in the NetworkBehaviour class to facilitate development.</p> <pre><code>public class MyNetworkBehaviour : NetworkBehaviour\n{\n    public void MyMethod()\n    {\n        //Instead of doing this\n        Identity.SetActive(false);\n\n        //You can do this\n        SetActive(false);\n    }\n}\n</code></pre> <p>Some NetworkBehaviour are already implemented by default:</p>"},{"location":"components/#network-transform","title":"Network Transform","text":"<p>The NetworkTransform component is used to synchronize the state of a transform over the network. You can set the update rate and which components will be updated, reducing the required data transfer rate.</p> <p></p> <p>Warning</p> <p>Changing which fields will be synchronized (i.e., NetworkTransform.SyncModeMask) should not be done in real-time.</p>"},{"location":"components/#network-rigidbody-transform","title":"Network Rigidbody Transform","text":"<p>The NetworkRigidbodyTransform component functions similarly to the NetworkTransform component but also synchronizes the object's velocity, angular velocity, and the Rigidbody.IsKinematic property, improving the synchronization of physics-enabled objects.</p> <p></p> <p>Warning</p> <p>Changing which fields will be synchronized (i.e., NetworkTransform.SyncModeMask) should not be done in real-time.</p>"},{"location":"components/#network-animator","title":"Network Animator","text":"<p>The NetworkAnimator component is used to synchronize the state of an Animator, including its parameters, layer weights, and animation/transition times.</p> <p></p> <p>Warning</p> <p>Due to the functioning of the Animator.SetTrigger function, automatic synchronization is not possible. Use the NetworkAnimator.SetTrigger method to properly synchronize the state.</p>"},{"location":"components/#network-value","title":"Network Value","text":"<p>The simplest way to customize the states of a NetworkBehaviour is by using a NetworkValue attached to it:</p> <p></p> <p>Tip</p> <p>All NetworkValues have a yellow name in the inspector to make differentiation easier.</p> <p>Tip</p> <p>For testing purposes, you can change the value of any NetworkValue through the inspector, even without having authority.</p> <pre><code>public class CustomBehaviour : NetworkBehaviour\n{\n    //Only the NetworkIdentity owner can modify this value\n    public ColorNetworkValue color = new ColorNetworkValue(Color.white);\n\n    //Only the server can modify this value\n    public IntNetworkValue team = new IntNetworkValue(2, NetworkValue.ModifierType.Server);\n\n    private void OnEnable()\n    {\n        //Register values\n        WithValues(color, team);\n    }\n\n    private void Update()\n    {\n        if(!HasAuthority)\n            return;\n\n        if(Input.GetKeyDown(KeyCode.Space))\n            team.Value ++;   \n    }\n}\n</code></pre>"},{"location":"components/#supported-types","title":"Supported Types","text":"<p>Below is a list of all supported types of NetworkValue by default:</p> <ul> <li>Bool</li> <li>Byte</li> <li>Int</li> <li>Float</li> <li>Double</li> <li>Long</li> <li>Short</li> <li>String</li> <li>Vector2</li> <li>Vector3</li> <li>Vector4</li> <li>Quaternion</li> <li>Color</li> <li>Color32 </li> <li>NetworkId</li> </ul>"},{"location":"components/#custom-type-support","title":"Custom Type Support","text":"<p>If necessary, you can implement your own NetworkValue. In the following example, we can see the implementation of a FloatArrayNetworkValue:</p> <pre><code>[Serializable]\npublic class FloatArrayNetworkVariable : NetworkValue&lt;float[]&gt;\n{\n    public FloatArrayNetworkVariable(float[] defaultValue, ModifierType type = ModifierType.OwnerOnly) : base(defaultValue, type) {}\n    public override void Serialize(BinaryWriter writer)\n    {\n        writer.Write(Value.Length);\n        for (var i = 0; i &lt; Value.Length; i++)\n            writer.Write(Value[i]);\n    }\n\n    public override void Deserialize(BinaryReader reader)\n    {\n        var length = reader.ReadInt32();\n        Value = new float[length];\n        for (var i = 0; i &lt; length; i++)\n            Value[i] = reader.ReadSingle();\n    }\n}\n\npublic class SceneLoadingSimplePlayer : NetworkBehaviour\n{\n    public FloatArrayNetworkVariable justAValue = new FloatArrayNetworkVariable(new float[10]);\n}\n</code></pre>"},{"location":"components/#listening-for-changes","title":"Listening For Changes","text":"<p>To facilitate, the NetworkValue&lt;T&gt; class has the OnValueChanged callback, which is called when the value of the NetworkValue changes (locally or externally), which is useful for creating reactive systems, such as a point counter on the screen that should update whenever the number of points changes.</p> <pre><code>public class PlayerController : NetworkBehaviour\n{\n    public StringNetworkValue nickname = new StringNetworkValue(\"\");\n    public TMP_Text headPlate;\n\n    public void OnEnable()\n    {\n        WithValues(nickname);\n\n        nickname.OnValueChanged += (oldValue, newValue) =&gt;\n        {\n            headPlate.text = newValue;\n        };\n    } \n}\n</code></pre>"},{"location":"components/#modifier-type","title":"Modifier Type","text":"<p>Each NetworkValue can have its own modification permissions, regardless of the ownership of the NetworkIdentity of the object.</p> <pre><code>//Only the NetworkIdentity owner can modify this value\npublic ColorNetworkValue color = new ColorNetworkValue(Color.white);\n\n//Only the server can modify this value\npublic IntNetworkValue team = new IntNetworkValue(2, NetworkValue.ModifierType.Server);\n</code></pre> <p>Warning</p> <p>Do not change the modification permissions of a variable in real-time. If necessary, set it to ModifierType.Everybody.</p>"},{"location":"custom_behaviours/","title":"Creating Custom Behaviours","text":"<p>To implement the logic of your project, you'll need to implement your own NetworkBehaviours. Below you can find the basic structure of a NetworkBehaviour and its components:</p> <pre><code>public class CustomNetworkBehaviour : NetworkBehaviour\n{\n    //My Fields\n    public float walkSpeed = 3f;\n\n    //My Network Values\n    public IntNetworkValue team = new IntNetworkValue(0);\n\n    //Unity callbacks\n    public void OnEnable(){}\n\n    //Network callbacks\n    public override void OnSpawned(bool isRetroactive){}\n}\n</code></pre> <p>Tip</p> <p>A NetworkBehaviour works exactly like a normal MonoBehaviour while also providing state synchronization over the network.</p> <p>Warning</p> <p>It's not possible to remove and/or add a NetworkBehaviour in real-time.</p>"},{"location":"custom_behaviours/#custom-serialization","title":"Custom Serialization","text":"<p>If your NetworkBehaviour has a state that's too complex to synchronize using only NetworkValue, you can use custom serialization. Simply implement the INetworkBehaviourSerializer interface in your NetworkBehaviour:</p> <pre><code>public class CustomNetworkBehaviour : NetworkBehaviour, INetworkBehaviourSerializer\n{\n    public float[] valueTooComplex = new float[0];\n\n    public void OnSerialize(BinaryWriter writer, bool forceSendAll)\n    {\n        writer.Write(valueTooComplex.Length);\n        for (var i = 0; i &lt; valueTooComplex.Length; i++)\n        {\n            writer.Write(valueTooComplex[i]);\n        }   \n    }\n\n    public void OnDeserialize(BinaryReader reader)\n    {\n        var length = reader.ReadInt32();\n        valueTooComplex = new float[length];\n        for (var i = 0; i &lt; length; i++)\n        {\n            valueTooComplex[i] = reader.ReadSingle();\n        }\n    }\n}\n</code></pre> <p>By doing this, all data will be synchronized over the network (even if someone connects later). If the data is too complex (like that of NetworkTransform), you can implement a system to update only the necessary data, and when the forceSendAll parameter is true, all data must be synchronized. This parameter will only be true when a client connects later.</p> <p>Warning</p> <p>These values are not re-updated automatically. You should use the NetworkBehaviour.MarkSerializerDirty method to trigger serialization and, consequently, deserialization (with forceSendAll = false).</p>"},{"location":"custom_behaviours/#custom-packets","title":"Custom Packets","text":"<p>The third (and most optimized) method to synchronize custom data is by creating packets. Internally, both of the other two methods use packets to synchronize data, and even the basic functioning of the network is based on packets.</p> <p>The packet-based system was chosen as the main transfer method for NetBuff because it's lightweight, fast, and highly customizable. To create a custom packet, you need to create a class that implements the IPacket or IOwnedPacket interface:</p> <pre><code>public class PlayerPunchActionPacket : IPacket\n{\n    public NetworkId Id { get; set; }\n\n    public void Serialize(BinaryWriter writer)\n    {\n        Id.Serialize(writer);\n    }\n\n    public void Deserialize(BinaryReader reader)\n    {\n        Id = NetworkId.Read(reader);\n    }\n}\n\npublic class PacketBodyRotation : IOwnedPacket\n{\n    public NetworkId Id { get; set; }\n    public float BodyRotation { get; set; }\n\n    public void Serialize(BinaryWriter writer)\n    {\n        Id.Serialize(writer);\n        writer.Write(BodyRotation);\n    }\n\n    public void Deserialize(BinaryReader reader)\n    {\n        Id = NetworkId.Read(reader);\n        BodyRotation = reader.ReadSingle();\n    }\n}\n</code></pre> <p>A IOwnedPacket is an IPacket that is directly linked to a NetworkIdentity, therefore, they will be internally sent by a NetworkBehaviour, and the server will find the same NetworkBehaviour in other network points and call the receiving callback.</p> <p>A normal IPacket is not directly linked to anything, so they will simply be sent over the network, and all handling must be done manually.</p>"},{"location":"custom_behaviours/#sending-packets","title":"Sending Packets","text":"<p>To send a packet, simply use the NetworkBehaviour.SendPacket method, which will send the packet using the correct method automatically:</p> <pre><code>var packet = new PacketBodyRotation\n{\n    Id = Id,\n    BodyRotation = body.localEulerAngles.y\n};\nSendPacket(packet);\n</code></pre> <p>Internally, the system automatically chooses between the NetworkBehaviour.ClientSendPacket and NetworkBehaviour.ServerBroadcastPacket methods depending on whether the local environment is a client or server:</p> <pre><code>if (IsOwnedByClient)\n    ClientSendPacket(packet, reliable); //Client sends a message to the server\nelse\n    ServerBroadcastPacket(packet, reliable); //Server broadcast a message to all the clients\n</code></pre> <p>The server can also use the NetworkBehaviour.ServerSendPacket method to send a packet to a single client or the NetworkBehaviour.ServerBroadcastPacketExceptFor method to send to all clients except one.</p>"},{"location":"custom_behaviours/#receiving-owned-packets","title":"Receiving Owned Packets","text":"<p>To receive IOwnedPackets, you can use the NetworkBehaviour.OnServerReceivePacket and NetworkBehaviour.OnClientReceivePacket callbacks:</p> <pre><code>public class PlayerController : NetworkBehaviour\n{\n    //Server received the packet, check the ownership (optional) then broadcasts it to everyone else than the origin client\n    public override void OnServerReceivePacket(IOwnedPacket packet, int clientId)\n    {\n        switch (packet)\n        {\n            case PacketBodyRotation data:\n                if(clientId == OwnerId)\n                    ServerBroadcastPacketExceptFor(data, clientId);\n                break;\n        }\n    }\n\n\n    //Client received the packet, then applied it to the transform itself\n    public override void OnClientReceivePacket(IOwnedPacket packet)\n    {\n        switch (packet)\n        {\n            case PacketBodyRotation bodyRot:\n                transform.eulerAngles = new Vector3(0, bodyRot.BodyRotation, 0);\n                break;\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>Only the object with the IOwnedPacket.Id will receive the callbacks, so you don't need to worry about checking the id manually!</p>"},{"location":"custom_behaviours/#receiving-not-owned","title":"Receiving Not Owned","text":"<p>If a packet is not owned, you can register a custom listener for it anywhere in the project. In the example below, the Lever class is listening for PlayerPunchActionPacket, which is a packet sent by the PlayerController class:</p> <pre><code>public class Lever : NetworkBehaviour\n{\n    public BoolNetworkValue isOn = new(false);\n    public float radius = 2f;\n\n    private void OnEnable()\n    {\n        WithValues(isOn);\n        PacketListener.GetPacketListener&lt;PlayerPunchActionPacket&gt;().AddServerListener(OnPlayerPunch);\n        //GetPacketListener&lt;PlayerPunchActionPacket&gt;().OnClientReceive ...;\n    }\n\n    private void OnDisable()\n    {\n        PacketListener.GetPacketListener&lt;PlayerPunchActionPacket&gt;().RemoveServerListener(OnPlayerPunch);\n    }\n\n    private bool OnPlayerPunch(PlayerPunchActionPacket obj, int client)\n    {\n        var o = GetNetworkObject(obj.Id);\n        var dist = Vector3.Distance(o.transform.position, transform.position);\n\n        if (dist &gt; radius)\n            return true; //Consume packet\n\n        isOn.Value = !isOn.Value;\n        return false;\n    }\n}\n\npublic class PlayerController : NetworkBehaviour\n{\n    private void Update()\n    {\n        if (!HasAuthority)\n            return;\n\n        if (Input.GetKeyDown(KeyCode.Q))\n        {\n            SendPacket(new PlayerPunchActionPacket { Id = Id }, true);\n        }\n    }\n}\n</code></pre>"},{"location":"custom_behaviours/#packet-reliability","title":"Packet Reliability","text":"<p>When you use any of the packet sending methods, you can set the reliability argument. When set to true, the delivery method is reliable, supporting larger packets at the cost of being slightly slower. When set to false, there's no reliability, packets are limited to small sizes, but delivery is extremely fast!</p> <p>Synchronization of NetworkValue and any other important/instantaneous actions are done using reliable delivery because they need to be guaranteed. NetworkTransform, on the other hand, doesn't use reliable delivery because its state is updated almost constantly, so losing some packets probably won't cause issues.</p> <p>Packet loss can be seen using the NetworkManagerGUI. If the network connection quality is good, you might not lose any packets, but if you have network issues, you might experience some packet loss. Choose wisely when reliability is needed or not. Most of the time, it's better to use reliable=true.</p> Unreliable Reliable Speed Fast+ Fast Max Size Small Large Order Can be unordered Order will be maintained Loss Can be lost If lost, they will be resent Example Usage NetworkTransform, high-frequency update packets Actions, NetworkValues, etc..."},{"location":"custom_behaviours/#network-callbacks","title":"Network Callbacks","text":"<p>Tip</p> <p>See the API reference of the NetworkBehaviour class for the list of all properties and methods.</p>"},{"location":"custom_network_manager/","title":"Custom Network Manager","text":"<p>Sometimes, the default implementation of the network manager may not meet all your needs. We recommend creating your own implementation of the NetworkManager to fit your project's requirements. In the following example, there's a custom implementation of the NetworkManager where we override the NetworkManager.OnSpawnPlayer method to meet the needs of our project (Solis):</p> <pre><code>public class SolisNetworkManager : NetworkManager\n{\n    public GameObject robotPrefab;\n    public Transform robotSpawnPoint;\n    public Transform humanSpawnPoint;\n\n    private void Awake()\n    {\n        if (Instance == this || Instance == null) DontDestroyOnLoad(this.gameObject);\n        else Destroy(this.gameObject);\n    }\n\n    protected override void OnSpawnPlayer(int clientId)\n    {  \n        var prefab = clientId == 0 ? playerPrefab : robotPrefab;\n        var t = clientId == 0 ? humanSpawnPoint : robotSpawnPoint;\n        Assert.IsTrue(prefabRegistry.IsPrefabValid(prefab), \"Player prefab is not valid\");\n        SpawnNetworkObjectForClients(prefabRegistry.GetPrefabId(prefab), t.position, t.rotation, t.localScale, clientId);\n    }\n}\n</code></pre>"},{"location":"custom_network_manager/#network-callbacks","title":"Network Callbacks","text":"<p>Tip</p> <p>See the API reference of the NetworkManager class for the list of all properties and methods.</p>"},{"location":"discoverer/","title":"Server Discoverer","text":"<p>The server discovery system helps clients find available servers to join. The server discoverer will return a ServerInfo for each of the servers found.</p>"},{"location":"discoverer/#password-check-and-magic-number","title":"Password Check and Magic Number","text":"<p>The server owner can protect the game using a password, set in the NetworkTransport. When a client requests to join the server, the password must be provided (the transport should perform the verification, as the UDPNetworkTransport does).</p> <p>The magic number is a unique number for each project, defined in NetworkManager.VersionMagicNumber. You can change it whenever you want to make a version incompatible with others. When a client requests to join the server, the magic number must be provided (the transport should perform the verification, as the UDPNetworkTransport does).</p>"},{"location":"discoverer/#udp-server-discoverer","title":"UDP Server Discoverer","text":"<p>The UDPServerDiscoverer is a class used to find all available servers across all your networks. This method will call a callback whenever it finds a new server, returning a UDPServerInfo containing the remote server's IP address along with the standard ServerInfo fields.</p> <pre><code>var discoverer = new UDPServerDiscoverer(NetworkManager.Instance.versionMagicNumber, udp.port);\ndiscoverer.Search((info) =&gt;\n{\n    list.Add(info);\n    _serverList = list.ToArray();\n}, \n() =&gt; \n{ \n    Debug.Log(\"Done!\");\n});\n\n//discoverer.Cancel();\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":"<p>In the following sections, you'll find guidance on setting up a NetBuff project. We recommend using Unity 2023.2 or a newer version.</p>"},{"location":"getting_started/#installation-guide","title":"Installation Guide","text":"<ol> <li>Go to the Unity Package Manager (Window -&gt; Package Manager).</li> <li>Click the \"+\" button in the top-left corner of the window.</li> <li>Select \"Add package from git URL...\".</li> <li>Paste the link below and click \"Add\".</li> <li>That's it! Now the package is installed. You can also download samples if you wish.</li> </ol> <pre><code>https://github.com/buff-buff-studio/NetBuff-Lib.git#package\n</code></pre>"},{"location":"getting_started/#network-setup","title":"Network Setup","text":"<p>Create an empty scene to begin with. We recommend using the Basic (Built-In) template:</p> <p></p> <p>Now, create a new GameObject and add the following components to it:</p> <ul> <li>NetworkManager</li> <li>NetworkManagerGUI</li> <li>UDPNetworkTransport</li> </ul> <p></p>"},{"location":"getting_started/#network-manager","title":"Network Manager","text":"<p>The NetworkManager is the main networking component. It manages connections, objects, packets, and everything else related to networking, being a singleton component in the networking setup.</p>"},{"location":"getting_started/#network-manager-gui","title":"Network Manager GUI","text":"<p>The NetworkManagerGUI is a temporary component used for testing purposes. It creates a menu where you can manage network connection, find all servers on the network, and see network statistics.</p>"},{"location":"getting_started/#udp-network-transport","title":"UDP Network Transport","text":"<p>The UDPNetworkTransport is the basic transport used to establish server-client connections over the internet.</p>"},{"location":"getting_started/#set-network-transport","title":"Set Network Transport","text":"<p>Now we need to set the network transport in the network manager. Simply drag and drop the transport onto the transport field of the manager:</p> <p></p>"},{"location":"getting_started/#creating-the-player-prefab","title":"Creating the player prefab","text":"<p>If you start the game and try to host a server, you'll see an error in the console. By default, we need to provide a player prefab to the NetworkManager to spawn the player object. Following the steps below, we can create a simple player prefab:</p> <ol> <li>Create a new capsule.</li> <li>Add a NetworkTransform component.</li> <li>Drag it as a prefab into the Project View.</li> <li>Delete it from the scene.</li> </ol>"},{"location":"getting_started/#creating-the-prefab-registry","title":"Creating the prefab registry","text":"<p>Now you're one step away from success! Even if you set the player prefab, all networking ends must know which prefab the server is trying to spawn, so we need to set up our NetworkPrefabRegistry first.</p> <ol> <li>Create a new NetworkPrefabRegistry in the Project Folder context menu.</li> <li>Add the prefab to the registry list (Click the + button to add a new slot to the registry).</li> <li>Click the N button to generate a new ID.</li> <li>Set it in the registry field of the NetworkManager.</li> <li>Set the player prefab in the player prefab field of the NetworkManager.</li> </ol> <p></p>"},{"location":"getting_started/#done","title":"Done!","text":"<p>Now we're ready! You can click the play button and then click Start Host to start hosting (Client + Server).</p> <p></p>"},{"location":"getting_started/#simple-movement-test","title":"Simple Movement Test","text":"<p>By creating a simple script, we can test our server. You can use the code below or create your own logic!</p> <pre><code>using NetBuff.Components;\nusing UnityEngine;\n\nnamespace NetBuff.Samples.GettingStarted\n{\n    public class BasicMovement : NetworkBehaviour\n    {\n        private void Update()\n        {\n            if (!HasAuthority)\n                return;\n\n            var move = new Vector3(Input.GetAxis(\"Horizontal\"), Input.GetAxis(\"Vertical\"), 0);\n            transform.position += move * Time.deltaTime * 3;\n        }\n    }\n}   \n</code></pre> <p>Add it to the player and run the game again! You can even build and join the server as a client because your multiplayer game is already working!</p> <p></p>"},{"location":"managing_sessions/","title":"Manging Sessions","text":"<p>Everytime a client connects to the server a new SessionData is created. The session is used to store the client's custom data, such as nickname, score, team, etc. The session is not bound to client object itself, but to the client id itself. You can customize the session management implementing a custom NetworkManager class. In this guide, we will show you how to create a custom session management system.</p>"},{"location":"managing_sessions/#establishing-a-session","title":"Establishing a Session","text":"<p>When a client connects, a NetworkSessionEstablishRequestPacket is sent to the server. The method NetworkManager.OnCreateSessionEstablishRequest can be used to create a custom session establish packet:</p> <pre><code>protected override NetworkSessionEstablishRequestPacket OnCreateSessionEstablishRequest()\n{\n    return new ExampleNetworkSessionEstablishRequestPacket\n    {\n        ShouldBeAccepted = shouldBeAccepted.isOn,\n        Nickname = nicknameInput.text\n    };\n}\n</code></pre> <p>The server receives the packet and can accept or reject the client. The method NetworkManager.OnSessionEstablishingRequest is called when the session is established, accepting or rejecting the client:</p> <pre><code>protected override SessionEstablishingResponse OnSessionEstablishingRequest(NetworkSessionEstablishRequestPacket packet)\n{\n    var examplePacket = (ExampleNetworkSessionEstablishRequestPacket) packet;\n\n    if (examplePacket.ShouldBeAccepted)\n        return new SessionEstablishingResponse\n        {\n            Type = SessionEstablishingResponse.SessionEstablishingResponseType.Accept,\n        };\n\n    return new SessionEstablishingResponse\n        {\n            Type = SessionEstablishingResponse.SessionEstablishingResponseType.Reject,\n            Reason = \"just_testing\"\n        };\n}\n</code></pre>"},{"location":"managing_sessions/#creating-the-session","title":"Creating the Session","text":"<p>After a session is established, the method NetworkManager.OnCreateNewSessionData is called. This method is used to create the session object using the NetworkSessionEstablishRequestPacket used to establish the session:</p> <pre><code>protected override SessionData OnCreateNewSessionData(int clientId, NetworkSessionEstablishRequestPacket packet)\n{\n    var packetData = (ExampleNetworkSessionEstablishRequestPacket) packet;\n    return new ExampleSessionData()\n    {\n        nickname = packetData.Nickname\n    };\n}\n</code></pre> <p>After this, the session is created and the server syncs all object states to the client.</p> <p>Warning</p> <p>You need to override the method NetworkManager.OnCreateEmptySessionData as well:</p> <pre><code>public override SessionData OnCreateEmptySessionData()\n{\n    return new ExampleSessionData();\n}\n</code></pre>"},{"location":"managing_sessions/#session-restoration","title":"Session Restoration","text":"<p>If the option NetworkManager.SupportsSessionRestoration is enabled, the server will try to restore the client's session after a hot-reload. The method NetworkManager.OnRestoreSessionData is called to restore the session data:</p> <pre><code>protected override SessionData OnRestoreSessionData(int clientId, NetworkSessionEstablishRequestPacket packet)\n{\n    //Keeps the session using the nickname\n    var packetData = (ExampleNetworkSessionEstablishRequestPacket) packet;\n    return GetAllDisconnectedSessionData&lt;ExampleSessionData&gt;().FirstOrDefault(data =&gt; data.nickname == packetData.Nickname);\n}\n</code></pre> <p>If no session is found (returns null), the method NetworkManager.OnCreateEmptySessionData is called to create a new session.</p> <p>By default, the NetworkManager uses the client id to restore the session, so after a hot-reload, the client will be able to restore its session.</p> <p>Warning</p> <p>The client id increases after each connection, so if you are using the client id to restore the session, you should not rely on it to store any important data. If a client connects the disconnects and connects again, his id may not be the same after a hot-reload. We heavily recommend using another key to store the session data, such as the client's nickname.</p>"},{"location":"managing_sessions/#handling-session-data","title":"Handling Session Data","text":"<p>The session data is stored in A SessionData object, stored by the server. When the SessionData is created, it's content is synced to the client. The local SessionData object can be accessed using the NetworkManager.GetLocalSessionData method.</p> <p>Only the server may change the session data contents, and after a change, the server needs to call the SessionData.ApplyChanges method to sync the changes to the client:</p> <pre><code>public void Update()\n{\n    if(!IsServerRunning)\n        return;\n\n    foreach (var sessionData in GetAllSessionData&lt;ExampleSessionData&gt;())\n    {\n        sessionData.someInt++;\n        //Sync data to the client\n        sessionData.ApplyChanges();\n    }\n}\n</code></pre> <p>The method NetworkManager.OnLocalSessionDataChanged is called automatically when the client receives the session data changes:</p> <pre><code>protected override void OnLocalSessionDataChanged(SessionData data)\n{\n    var exampleSessionData = GetLocalSessionData&lt;ExampleSessionData&gt;();\n    //var exampleSessionData = (ExampleSessionData) data;\n\n    Debug.LogError($\"Test: {exampleSessionData.someInt}\");\n}\n</code></pre>"},{"location":"managing_sessions/#full-session-management-example","title":"Full Session Management Example","text":"<pre><code>namespace Samples.SessionDataTesting.Scripts\n{\n    public class SessionDataTestingNetworkManager : NetworkManager\n    {\n        public InputField nicknameInput;\n        public Toggle shouldBeAccepted;\n\n        #region Session Establishing\n        protected override NetworkSessionEstablishRequestPacket OnCreateSessionEstablishRequest()\n        {\n            return new ExampleNetworkSessionEstablishRequestPacket\n            {\n                ShouldBeAccepted = shouldBeAccepted.isOn,\n                Nickname = nicknameInput.text\n            };\n        }\n\n        protected override SessionEstablishingResponse OnSessionEstablishingRequest(NetworkSessionEstablishRequestPacket packet)\n        {\n            var examplePacket = (ExampleNetworkSessionEstablishRequestPacket) packet;\n\n            if (examplePacket.ShouldBeAccepted)\n                return new SessionEstablishingResponse\n                {\n                    Type = SessionEstablishingResponse.SessionEstablishingResponseType.Accept,\n                };\n\n            return new SessionEstablishingResponse\n                {\n                    Type = SessionEstablishingResponse.SessionEstablishingResponseType.Reject,\n                    Reason = \"just_testing\"\n                };\n        }\n        #endregion\n\n\n        #region Session Data Restoring\n        protected override SessionData OnRestoreSessionData(int clientId, NetworkSessionEstablishRequestPacket packet)\n        {\n            //Keeps the session using the nickname\n            var packetData = (ExampleNetworkSessionEstablishRequestPacket) packet;\n            return GetAllDisconnectedSessionData&lt;ExampleSessionData&gt;().FirstOrDefault(data =&gt; data.nickname == packetData.Nickname);\n        }\n        #endregion\n\n        #region Session Data Creation\n        //Server Side\n        protected override SessionData OnCreateNewSessionData(int clientId, NetworkSessionEstablishRequestPacket packet)\n        {\n            var packetData = (ExampleNetworkSessionEstablishRequestPacket) packet;\n            return new ExampleSessionData()\n            {\n                nickname = packetData.Nickname\n            };\n        }\n\n        protected override SessionData OnCreateEmptySessionData()\n        {\n            return new ExampleSessionData();\n        }\n        #endregion\n\n        #region Session Data Manipulation\n        public void Update()\n        {\n            if (Time.frameCount % 100 != 0)\n                return;\n\n            if(!IsServerRunning)\n                return;\n\n            foreach (var sessionData in GetAllSessionData&lt;ExampleSessionData&gt;())\n            {\n                sessionData.someInt++;\n                //Sync data to the client\n                sessionData.ApplyChanges();\n            }\n        }\n\n        //Client Side\n        public override void OnLocalSessionDataChanged(SessionData data)\n        {\n            var exampleSessionData = GetLocalSessionData&lt;ExampleSessionData&gt;();\n            //var exampleSessionData = (ExampleSessionData) data;\n\n            Debug.LogError($\"Test: {exampleSessionData.someInt}\");\n        }\n        #endregion\n    }\n\n    public class ExampleNetworkSessionEstablishRequestPacket : NetworkSessionEstablishRequestPacket\n    {\n        public bool ShouldBeAccepted { get; set; }\n        public string Nickname { get; set; }\n\n        public override void Serialize(BinaryWriter writer)\n        {\n            writer.Write(ShouldBeAccepted);\n            writer.Write(Nickname);\n        }\n\n        public override void Deserialize(BinaryReader reader)\n        {\n            ShouldBeAccepted = reader.ReadBoolean();\n            Nickname = reader.ReadString();\n        }\n    }\n\n    public class ExampleSessionData : SessionData\n    {\n        //Doesn't needs to be synced to the client\n        public string nickname;\n\n        //Needs to be synced to the client\n        public int someInt;\n\n        public override void Serialize(BinaryWriter writer, bool shouldSerializeEverything)\n        {\n            if (shouldSerializeEverything)\n                writer.Write(nickname);\n            writer.Write(someInt);\n        }\n\n        public override void Deserialize(BinaryReader reader, bool shouldDeserializeEverything)\n        {\n            if (shouldDeserializeEverything)\n                nickname = reader.ReadString();\n            someInt = reader.ReadInt32();\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>The parameter shouldSerializeEverything will only be true when the session data is being kept through a hot-reload, so all the data must be serialized.</p>"},{"location":"network_actions/","title":"Network Actions","text":"<p>Network Actions are used to listen when a network action is done, and get its result without needing to implement custom listeners or event callbacks:</p> <pre><code>NetworkManager.Instance.LoadScene(scene1).Then((id) =&gt;\n{\n    Debug.Log($\"Scene {id} loaded\");\n});\n</code></pre> <p>Some methods return a NetworkAction object, which can be used to chain multiple actions together. If you just want the normal result, you can use the NetworkAction.Value field:</p> <pre><code>var sceneName = NetworkManager.Instance.LoadScene(scene1).Value;\n</code></pre>"},{"location":"network_actions/#supported-actions","title":"Supported Actions","text":"<ul> <li>NetworkManager.LoadScene&lt;int, string&gt;</li> <li>NetworkManager.UnloadScene&lt;int, string&gt;</li> <li>NetworkIdentity.SetOwner&lt;NetworkId, NetworkIdentity&gt;</li> <li>NetworkIdentity.SetActive&lt;NetworkId, NetworkIdentity&gt;</li> <li>NetworkIdentity.MoveToScene&lt;NetworkId, NetworkIdentity&gt;</li> <li>NetworkIdentity.Spawn&lt;NetworkId, NetworkIdentity&gt;</li> <li>NetworkIdentity.Despawn&lt;NetworkId, NetworkIdentity&gt;</li> </ul>"},{"location":"network_testing/","title":"Testing the Network","text":"<p>We recommend using the Multiplayer Player Mode package to test your game in the editor without the need to build each time. Alternatively, you can simply build and run your project. With the fast reload system, you can edit your code in real-time, and your server's state will be maintained seamlessly, allowing you to adjust values or test/debug systems without the need to rebuild your project every time.</p> <p>The default transport method of NetBuff is UDP. By using the UDPNetworkTransport, you can test your game by connecting multiple clients (editors and builds) with just one click!</p> <p>We recommend using Clumsy to simulate delays and packet loss between your network connections to see where your projects need more optimization/cleanup. Clumsy is a free tool that can simulate delays, packet loss, out-of-order delivery, and more:</p> <p></p> <p>Tip</p> <p>By using the out-of-order delivery/packet loss feature, you can check if some of your packets being sent unreliably should be changed to the reliable method and check for any issues in network state synchronization.</p>"},{"location":"object_spawning/","title":"Spawning Objects","text":"<p>There are two types of NetworkIdentity objects: pre-existing and dynamically spawned. Using the NetworkIdentity.PrefabId field, you can check whether an object is pre-existing or not. If the PrefabId is empty, the object hasn't been dynamically spawned. Otherwise, the PrefabId will store the NetworkId of the prefab used to create that object. It's crucial for the server to know how to recreate the server state when a player connects later on.</p> <p>You can spawn a NetworkObject using the static method NetworkIdentity.Spawn:</p> <p><pre><code>if(Input.GetMouseButtonDown(0))\n{\n    Spawn(shotPrefab, cameraTransform.position + cameraTransform.forward * 1, cameraTransform.rotation, Vector3.one * 0.5f, true);\n}\n</code></pre> And there you go! With one line of code, your game object is spawned across the network. Just remember to ensure that your prefab is registered in the NetworkPrefabRegistry. You can also use the NetBuff/Check Prefab Registries if there are any issues with your registries:</p> <p></p>"},{"location":"object_spawning/#spawning-parameters","title":"Spawning Parameters","text":"<p>Below is a list of all the parameters you can set on a NetworkIdentity object spawn:</p> Parameter Type Description Owner int Represents the ownership id of the object. Default is -1 (Server) Position Vector3 Position of the object in the world Rotation Quaternion Rotation of the object in the world Scale Vector3 Scale of the object Active bool Object's activity state SceneId int Represents the destination scene id. Default is -1 (Last loaded scene) <p>Warning</p> <p>The scene id is the only complex parameter. By default, it's set to -1, so the NetworkIdentity object will be spawned in the currently last loaded scene. If the value is set to any other value, it will be set to the corresponding loaded scene. Scene id 0 always points to the main scene where the NetworkManager is located.</p> <p>Go to the Scene Management page for more information on the scene system.</p>"},{"location":"reconnection_and_hot_reload/","title":"Reconnection and Hot-Reload","text":"<p>NetBuff supports mid/end-game connections seamlessly: Each NetworkIdentity from every scene will be synchronized, maintaining its values and additional serialized data. Even in the editor, you can edit the code, recompile the project, and the server will seamlessly maintain its state (clients will need to reconnect, but even their player objects will be kept in the same state without data loss).</p> <p>To keep the system running, you must ensure that the object state values are synchronized over the network, either using NetworkValues or utilizing callbacks from the INetworkBehaviourSerializer interface. If you need additional synchronization, you can also request a custom package in the NetworkBehaviour.OnSpawned callback, using the isRetroactive parameter to check if it's a late synchronization or not.</p> <p>Tip</p> <p>We strongly recommend that after every significant modification/addition to the system, developers perform the following checks:</p> <ol> <li>Hot-Reload functionality still works with your system.</li> <li>Players who connect mid/end-game do not encounter issues synchronizing the state of your game.</li> </ol> <p>These two checks ensure you won't have network state synchronization problems, and every client/player will be able to synchronize the game state seamlessly. Hot-Reload isn't necessary but can expedite network testing (in addition to demonstrating the application of best practices), as you can modify the code and NetworkValues via the inspector without losing the current server state.</p>"},{"location":"samples/","title":"Samples \ud83d\udd1c","text":"<p>There are multiple samples in the package that can imported directly into your project. The samples are located in the <code>Samples</code> folder of the package. In the table below you can find a brief description of each sample, and a download link to a build of the sample (if available).</p> Sample Name Description Download Getting Started A sample created following the steps of the page Getting Started \ud83d\udd1c Local Split Screen A sample showcasing the local split screen feature \ud83d\udd1c Session Data Testing A sample showcasing how to customize the session data feature displayed on the page Managing Sessions \ud83d\udd1c Scene Loading A sample showcasing how to load/unload scenes and move objects between scenes at run time. You can find information about it on the page Scene Management \ud83d\udd1c"},{"location":"scene_management/","title":"Scene Management","text":"<p>NetBuff supports real-time scene loading/unloading, enabling more complex flows like level loading, among others. Every NetworkIdentity has the field NetworkIdentity.SceneId which indicates in which loaded scene the object resides.</p>"},{"location":"scene_management/#scene-id-rules","title":"Scene Id Rules","text":"<p>The scene where the NetworkManager is considered the main scene and receives the id 0, always being the first scene in the NetworkManager.LoadedScenes list, which stores all currently loaded scenes. A scene's id is defined by its index in the list and can vary according to the loading/unloading order of scenes.</p> <p>Note</p> <p>The scene id -1 is the default and always refers to the last currently loaded scene (NetworkBehaviour.LastLoadedScene). Objects are spawned in this scene by default if the scene parameter is omitted.</p> <p>Warning</p> <p>It's recommended to use the scene name as a persistent way to reference a scene. You can use the methods NetworkBehaviour.GetSceneName and NetworkBehaviour.GetSceneId to convert between name and id.</p>"},{"location":"scene_management/#loading-and-unloading-scenes","title":"Loading and Unloading Scenes","text":"<p>To load a scene, simply use the NetworkManager.LoadScene method, and to unload, use the NetworkManager.UnloadScene method.</p> <pre><code>if (NetworkManager.Instance.IsSceneLoaded(scene1))\n    NetworkManager.Instance.UnloadScene(scene1);\nelse\n    NetworkManager.Instance.LoadScene(scene1);\n</code></pre> <p>Warning</p> <p>It's not possible to unload the main scene where the NetworkManager resides.</p> <p>Note</p> <p>Only the server can load/unload scenes, but all scenes are synchronized for clients, and all other scene control-related methods and properties work as usual.</p>"},{"location":"scene_management/#moving-objects-between-scenes","title":"Moving Objects Between Scenes","text":"<p>It's possible to move a NetworkIdentity between scenes using the NetworkIdentity.MoveToScene method.</p> <pre><code>public void Update()\n{\n    if(!HasAuthority)\n        return;\n\n    if (Input.GetKeyDown(KeyCode.M))\n    {\n        var id = SceneId + 1;\n        if (id &gt;= LoadedSceneCount)\n            id = 0;\n\n        //Moves the object to the next loaded scene\n        MoveToScene(id);\n    }\n}\n</code></pre> <p>Warning</p> <p>You need to have control over the NetworkIdentity to move it between scenes.</p>"},{"location":"transports/","title":"Network Transport","text":"<p>The NetworkTransport is a base class used to define how communication between network endpoints will be handled. You can implement your own transport to support any kind of connection protocol you desire, such as Bluetooth, etc...</p> <pre><code>public abstract class NetworkTransport : MonoBehaviour\n{\n    #region ManagementMethods\n    public abstract void StartHost(int magicNumber);\n    public abstract void StartServer();\n    public abstract void StartClient(int magicNumber);\n    public abstract void Close();\n    #endregion\n\n    #region Client Methods\n    public abstract IClientConnectionInfo GetClientInfo(int id);\n    public abstract int GetClientCount();\n    public abstract IEnumerable&lt;IClientConnectionInfo&gt; GetClients();\n    #endregion\n\n    #region Lifecycle\n    public abstract void ClientDisconnect(string reason);\n    public abstract void ServerDisconnect(int id, string reason);\n    public abstract void SendClientPacket(IPacket packet, bool reliable = false);\n    public abstract void SendServerPacket(IPacket packet, int target = -1, bool reliable = false);\n\n    public void BroadcastServerPacket(IPacket packet, bool reliable = false)\n    {\n        SendServerPacket(packet, -1, reliable);\n    }\n    #endregion\n}\n</code></pre>"},{"location":"transports/#local","title":"Local","text":"<p>The LocalNetworkTransport is the most basic network transport method. With local network transport, you can add support for split-screen mode without any additional coding required (just manage player input separately): each action will be seamlessly handled, even locally.</p> <p></p>"},{"location":"transports/#udp","title":"UDP","text":"<p>UDP (User Datagram Protocol) is the primary gaming network protocol, thus it's the basic internet-based protocol supported. Currently, UDP connection is established using the LiteNetLib library, which provides custom reliability systems that fit our gaming needs perfectly.</p> <p></p> <p>In the UDPNetworkTransport component, you can set the host/remote address, host/remote port, connection password, and maximum server client limit.</p>"},{"location":"troubleshooting/","title":"Common Troubleshooting \ud83d\udd1c","text":"<p>Coming Soon! We understand that sometimes things don't go as planned, but worry not! We're compiling a comprehensive list of common issues and troubleshooting tips to assist you in overcoming any hurdles you may encounter. Whether it's network connectivity issues, setup problems, or anything in between, we've got you covered. Keep an eye out for updates!</p>"}]}